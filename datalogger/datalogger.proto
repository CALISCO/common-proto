syntax = "proto3";

import 'google/protobuf/timestamp.proto';
import 'nanopb.proto';

// Helper messages
message StatisticalAggregate {
  uint32 samples = 1;
  int32 min = 2;
  int32 max = 3;
  int32 avg = 4;
  uint32 stdev = 5;
}

// Histogram with integer bucket boundaries and counts
message IntHistogram {
  // Parallel list of histogram bucket boundaries and counts.
  // Bucket 0 is the range from [INT32_MIN, bucket[0])
  // Bucket i is the range from [bucket[i-1], bucket[i])
  // If there is one more count element than bucket, the last bucket's upper range is INT32_MAX
  repeated int32 buckets = 1 [(nanopb).max_count = 10];  // exclusive upper limit
  repeated uint32 counts = 2 [(nanopb).max_count = 11];
}

// Not used anymore, payload placed directly in DataloggerRecord
message LegacyPayload {
  oneof value {
    SourceDef sourceDef = 1;
    InfoString info = 2;
    CanMessage receivedCanMessage = 3;
    CanMessage transmittedCanMessage = 4;
    CanError canError = 5;
    CanErrorCounter canErrorCount = 6 [deprecated=true];
    StatisticalAggregate voltageReading = 7 [deprecated=true];
    StatisticalAggregate temperatureReading = 8 [deprecated=true];
    StatisticalAggregate loopTimer = 9 [deprecated=true];
    IntHistogram loopTimerDistribution = 11 [deprecated=true];
    google.protobuf.Timestamp rtcTime = 10;
    StatisticalAggregate sensorReading = 12;
    IntHistogram sensorDistribution = 13;
  }
}

message SourceDef {
  enum SourceType {
    UNKNOWN = 0;
    CAN = 1;
    TIME = 2;
    VOLTAGE = 3;
    TEMPERATURE = 4;
  }
  SourceType sourceType = 1;
  string name = 2 [(nanopb).max_size = 32];
}

message InfoString {
  string info = 1 [(nanopb).max_size = 128];
}

message CanMessage {
  uint32 id = 1;
  enum FrameType {
    STANDARD_FRAME = 0;
    EXTENDED_FRAME = 1;
  }
  FrameType length = 2;
  enum RtrType {
    DATA_FRAME = 0;
    REMOTE_FRAME = 1;
  }
  RtrType rtr = 3;
  bytes data = 4 [(nanopb).max_size = 8];
}

message CanError {
  enum ErrorSource {
    UNKNOWN = 0;
    ERROR_WARNING = 1;
    ERROR_PASSIVE = 2;
    BUS_OFF = 3;
    DATA_OVERRUN = 4;
    ARBITRATION_LOST = 5;
    OTHER = 127;
  }
  ErrorSource source = 1;
}

message CanErrorCounter {
  enum ErrorCounterSource {
    TRANSMIT_COUNTER = 0;
    RECEIVE_COUNTER = 1;
  }
  ErrorCounterSource source = 1;
  uint32 count = 2;
}

// Actual messages
message DataloggerRecord {
  uint32 timestamp_ms = 1;
  uint32 timestamp_variability = 2;
  uint32 sourceId = 3;
  oneof payload {
    LegacyPayload legacy_payload = 4 [deprecated=true];
    SourceDef sourceDef = 5;
    InfoString info = 6;
    CanMessage receivedCanMessage = 7;
    CanMessage transmittedCanMessage = 8;
    CanError canError = 9;
    google.protobuf.Timestamp rtcTime = 10;
    StatisticalAggregate sensorReading = 11;
    IntHistogram sensorDistribution = 12;
  }
}
