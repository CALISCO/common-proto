// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "telemetry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class DeviceInfoMessage_DeviceMeasurementInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfoMessage_DeviceMeasurementInfo>
     _instance;
} _DeviceInfoMessage_DeviceMeasurementInfo_default_instance_;
class DeviceInfoMessage_DeviceDelayInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfoMessage_DeviceDelayInfo>
     _instance;
} _DeviceInfoMessage_DeviceDelayInfo_default_instance_;
class DeviceInfoMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfoMessage>
     _instance;
} _DeviceInfoMessage_default_instance_;
class StatisticalAggregateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StatisticalAggregate>
     _instance;
} _StatisticalAggregate_default_instance_;
class MeasurementAggregateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MeasurementAggregate>
     _instance;
} _MeasurementAggregate_default_instance_;
class InfoMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InfoMessage>
     _instance;
} _InfoMessage_default_instance_;
class TelemetryMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TelemetryMessage>
     _instance;
  const ::MeasurementAggregate* sensorreading_;
  const ::InfoMessage* infomessage_;
  const ::DeviceInfoMessage* deviceinfo_;
} _TelemetryMessage_default_instance_;

namespace protobuf_telemetry_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage_DeviceMeasurementInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage_DeviceMeasurementInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage_DeviceMeasurementInfo, readingtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage_DeviceMeasurementInfo, units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage_DeviceMeasurementInfo, minsensorlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage_DeviceMeasurementInfo, maxsensorlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage_DeviceMeasurementInfo, minerrorbound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage_DeviceMeasurementInfo, maxerrorbound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage_DeviceMeasurementInfo, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage_DeviceMeasurementInfo, accuracy_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage_DeviceDelayInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage_DeviceDelayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage_DeviceDelayInfo, expectedsampledelay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage_DeviceDelayInfo, longestacceptedsampledelay_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, measurementinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, delayinfo_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticalAggregate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticalAggregate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticalAggregate, numsamples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticalAggregate, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticalAggregate, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticalAggregate, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticalAggregate, stdev_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementAggregate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementAggregate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementAggregate, reading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasurementAggregate, sampledelay_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoMessage, messagetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoMessage, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryMessage, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryMessage, timestamp_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryMessage, timestamp_variability_),
  offsetof(TelemetryMessageDefaultTypeInternal, sensorreading_),
  offsetof(TelemetryMessageDefaultTypeInternal, infomessage_),
  offsetof(TelemetryMessageDefaultTypeInternal, deviceinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryMessage, value_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(DeviceInfoMessage_DeviceMeasurementInfo)},
  { 21, 28, sizeof(DeviceInfoMessage_DeviceDelayInfo)},
  { 30, 39, sizeof(DeviceInfoMessage)},
  { 43, 53, sizeof(StatisticalAggregate)},
  { 58, 65, sizeof(MeasurementAggregate)},
  { 67, 74, sizeof(InfoMessage)},
  { 76, 88, sizeof(TelemetryMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceInfoMessage_DeviceMeasurementInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceInfoMessage_DeviceDelayInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceInfoMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StatisticalAggregate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MeasurementAggregate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfoMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TelemetryMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "telemetry.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_nanopb_2eproto::InitDefaults();
  _DeviceInfoMessage_DeviceMeasurementInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeviceInfoMessage_DeviceMeasurementInfo_default_instance_);_DeviceInfoMessage_DeviceDelayInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeviceInfoMessage_DeviceDelayInfo_default_instance_);_DeviceInfoMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeviceInfoMessage_default_instance_);_StatisticalAggregate_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StatisticalAggregate_default_instance_);_MeasurementAggregate_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MeasurementAggregate_default_instance_);_InfoMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InfoMessage_default_instance_);_TelemetryMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TelemetryMessage_default_instance_);_DeviceInfoMessage_default_instance_._instance.get_mutable()->measurementinfo_ = const_cast< ::DeviceInfoMessage_DeviceMeasurementInfo*>(
      ::DeviceInfoMessage_DeviceMeasurementInfo::internal_default_instance());
  _DeviceInfoMessage_default_instance_._instance.get_mutable()->delayinfo_ = const_cast< ::DeviceInfoMessage_DeviceDelayInfo*>(
      ::DeviceInfoMessage_DeviceDelayInfo::internal_default_instance());
  _MeasurementAggregate_default_instance_._instance.get_mutable()->reading_ = const_cast< ::StatisticalAggregate*>(
      ::StatisticalAggregate::internal_default_instance());
  _MeasurementAggregate_default_instance_._instance.get_mutable()->sampledelay_ = const_cast< ::StatisticalAggregate*>(
      ::StatisticalAggregate::internal_default_instance());
  _TelemetryMessage_default_instance_.sensorreading_ = const_cast< ::MeasurementAggregate*>(
      ::MeasurementAggregate::internal_default_instance());
  _TelemetryMessage_default_instance_.infomessage_ = const_cast< ::InfoMessage*>(
      ::InfoMessage::internal_default_instance());
  _TelemetryMessage_default_instance_.deviceinfo_ = const_cast< ::DeviceInfoMessage*>(
      ::DeviceInfoMessage::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017telemetry.proto\032\014nanopb.proto\"\332\004\n\021Devi"
      "ceInfoMessage\022\n\n\002id\030\001 \001(\r\022\023\n\004name\030\002 \001(\tB"
      "\005\222\?\002\010 \022A\n\017measurementInfo\030\003 \001(\0132(.Device"
      "InfoMessage.DeviceMeasurementInfo\0225\n\tdel"
      "ayInfo\030\004 \001(\0132\".DeviceInfoMessage.DeviceD"
      "elayInfo\032\325\002\n\025DeviceMeasurementInfo\022J\n\013re"
      "adingType\030\001 \001(\01625.DeviceInfoMessage.Devi"
      "ceMeasurementInfo.READING_TYPE\022\024\n\005units\030"
      "\002 \001(\tB\005\222\?\002\010\004\022\026\n\016minSensorLimit\030\003 \001(\r\022\026\n\016"
      "maxSensorLimit\030\004 \001(\r\022\025\n\rminErrorBound\030\005 "
      "\001(\r\022\025\n\rmaxErrorBound\030\006 \001(\r\022\022\n\nresolution"
      "\030\007 \001(\r\022\020\n\010accuracy\030\010 \001(\r\"V\n\014READING_TYPE"
      "\022\013\n\007VOLTAGE\020\001\022\013\n\007CURRENT\020\002\022\017\n\013TEMPERATUR"
      "E\020\003\022\007\n\003MCC\020\004\022\022\n\016DRIVER_CONTROL\020\005\032R\n\017Devi"
      "ceDelayInfo\022\033\n\023expectedSampleDelay\030\001 \001(\r"
      "\022\"\n\032longestAcceptedSampleDelay\030\002 \001(\r\"a\n\024"
      "StatisticalAggregate\022\022\n\nnumSamples\030\001 \001(\r"
      "\022\013\n\003min\030\002 \001(\r\022\013\n\003max\030\003 \001(\r\022\014\n\004mean\030\004 \001(\r"
      "\022\r\n\005stdev\030\005 \001(\r\"j\n\024MeasurementAggregate\022"
      "&\n\007reading\030\001 \001(\0132\025.StatisticalAggregate\022"
      "*\n\013sampleDelay\030\002 \001(\0132\025.StatisticalAggreg"
      "ate\"\230\001\n\013InfoMessage\0224\n\013messageType\030\001 \001(\016"
      "2\031.InfoMessage.MESSAGE_TYPE:\004INFO\022\026\n\007mes"
      "sage\030\002 \001(\tB\005\222\?\002\010@\";\n\014MESSAGE_TYPE\022\010\n\004INF"
      "O\020\001\022\t\n\005DEBUG\020\002\022\013\n\007WARNING\020\003\022\t\n\005ERROR\020\004\"\333"
      "\001\n\020TelemetryMessage\022\n\n\002id\030\001 \001(\r\022\024\n\014times"
      "tamp_ms\030\002 \001(\r\022\035\n\025timestamp_variability\030\003"
      " \001(\r\022.\n\rsensorReading\030\004 \001(\0132\025.Measuremen"
      "tAggregateH\000\022#\n\013infoMessage\030\005 \001(\0132\014.Info"
      "MessageH\000\022(\n\ndeviceInfo\030\006 \001(\0132\022.DeviceIn"
      "foMessageH\000B\007\n\005valueB\020B\016TelemetryProto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1238);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "telemetry.proto", &protobuf_RegisterTypes);
  ::protobuf_nanopb_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_telemetry_2eproto

const ::google::protobuf::EnumDescriptor* DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_descriptor() {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_enum_descriptors[0];
}
bool DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE DeviceInfoMessage_DeviceMeasurementInfo::VOLTAGE;
const DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE DeviceInfoMessage_DeviceMeasurementInfo::CURRENT;
const DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE DeviceInfoMessage_DeviceMeasurementInfo::TEMPERATURE;
const DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE DeviceInfoMessage_DeviceMeasurementInfo::MCC;
const DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE DeviceInfoMessage_DeviceMeasurementInfo::DRIVER_CONTROL;
const DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE DeviceInfoMessage_DeviceMeasurementInfo::READING_TYPE_MIN;
const DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE DeviceInfoMessage_DeviceMeasurementInfo::READING_TYPE_MAX;
const int DeviceInfoMessage_DeviceMeasurementInfo::READING_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* InfoMessage_MESSAGE_TYPE_descriptor() {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_enum_descriptors[1];
}
bool InfoMessage_MESSAGE_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InfoMessage_MESSAGE_TYPE InfoMessage::INFO;
const InfoMessage_MESSAGE_TYPE InfoMessage::DEBUG;
const InfoMessage_MESSAGE_TYPE InfoMessage::WARNING;
const InfoMessage_MESSAGE_TYPE InfoMessage::ERROR;
const InfoMessage_MESSAGE_TYPE InfoMessage::MESSAGE_TYPE_MIN;
const InfoMessage_MESSAGE_TYPE InfoMessage::MESSAGE_TYPE_MAX;
const int InfoMessage::MESSAGE_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfoMessage_DeviceMeasurementInfo::kReadingTypeFieldNumber;
const int DeviceInfoMessage_DeviceMeasurementInfo::kUnitsFieldNumber;
const int DeviceInfoMessage_DeviceMeasurementInfo::kMinSensorLimitFieldNumber;
const int DeviceInfoMessage_DeviceMeasurementInfo::kMaxSensorLimitFieldNumber;
const int DeviceInfoMessage_DeviceMeasurementInfo::kMinErrorBoundFieldNumber;
const int DeviceInfoMessage_DeviceMeasurementInfo::kMaxErrorBoundFieldNumber;
const int DeviceInfoMessage_DeviceMeasurementInfo::kResolutionFieldNumber;
const int DeviceInfoMessage_DeviceMeasurementInfo::kAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfoMessage_DeviceMeasurementInfo::DeviceInfoMessage_DeviceMeasurementInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_telemetry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceInfoMessage.DeviceMeasurementInfo)
}
DeviceInfoMessage_DeviceMeasurementInfo::DeviceInfoMessage_DeviceMeasurementInfo(const DeviceInfoMessage_DeviceMeasurementInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_units()) {
    units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  ::memcpy(&minsensorlimit_, &from.minsensorlimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&readingtype_) -
    reinterpret_cast<char*>(&minsensorlimit_)) + sizeof(readingtype_));
  // @@protoc_insertion_point(copy_constructor:DeviceInfoMessage.DeviceMeasurementInfo)
}

void DeviceInfoMessage_DeviceMeasurementInfo::SharedCtor() {
  _cached_size_ = 0;
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&minsensorlimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accuracy_) -
      reinterpret_cast<char*>(&minsensorlimit_)) + sizeof(accuracy_));
  readingtype_ = 1;
}

DeviceInfoMessage_DeviceMeasurementInfo::~DeviceInfoMessage_DeviceMeasurementInfo() {
  // @@protoc_insertion_point(destructor:DeviceInfoMessage.DeviceMeasurementInfo)
  SharedDtor();
}

void DeviceInfoMessage_DeviceMeasurementInfo::SharedDtor() {
  units_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfoMessage_DeviceMeasurementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfoMessage_DeviceMeasurementInfo::descriptor() {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceInfoMessage_DeviceMeasurementInfo& DeviceInfoMessage_DeviceMeasurementInfo::default_instance() {
  protobuf_telemetry_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceInfoMessage_DeviceMeasurementInfo* DeviceInfoMessage_DeviceMeasurementInfo::New(::google::protobuf::Arena* arena) const {
  DeviceInfoMessage_DeviceMeasurementInfo* n = new DeviceInfoMessage_DeviceMeasurementInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceInfoMessage_DeviceMeasurementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceInfoMessage.DeviceMeasurementInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_units()) {
    GOOGLE_DCHECK(!units_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*units_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&minsensorlimit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accuracy_) -
        reinterpret_cast<char*>(&minsensorlimit_)) + sizeof(accuracy_));
    readingtype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceInfoMessage_DeviceMeasurementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceInfoMessage.DeviceMeasurementInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DeviceInfoMessage.DeviceMeasurementInfo.READING_TYPE readingType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_IsValid(value)) {
            set_readingtype(static_cast< ::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string units = 2 [(.nanopb) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->units().data(), static_cast<int>(this->units().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceInfoMessage.DeviceMeasurementInfo.units");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minSensorLimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_minsensorlimit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minsensorlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maxSensorLimit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_maxsensorlimit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxsensorlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minErrorBound = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_minerrorbound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minerrorbound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maxErrorBound = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_maxerrorbound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxerrorbound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 resolution = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accuracy = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_accuracy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceInfoMessage.DeviceMeasurementInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceInfoMessage.DeviceMeasurementInfo)
  return false;
#undef DO_
}

void DeviceInfoMessage_DeviceMeasurementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceInfoMessage.DeviceMeasurementInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DeviceInfoMessage.DeviceMeasurementInfo.READING_TYPE readingType = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->readingtype(), output);
  }

  // optional string units = 2 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->units().data(), static_cast<int>(this->units().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfoMessage.DeviceMeasurementInfo.units");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->units(), output);
  }

  // optional uint32 minSensorLimit = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->minsensorlimit(), output);
  }

  // optional uint32 maxSensorLimit = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxsensorlimit(), output);
  }

  // optional uint32 minErrorBound = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->minerrorbound(), output);
  }

  // optional uint32 maxErrorBound = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->maxerrorbound(), output);
  }

  // optional uint32 resolution = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->resolution(), output);
  }

  // optional uint32 accuracy = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->accuracy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceInfoMessage.DeviceMeasurementInfo)
}

::google::protobuf::uint8* DeviceInfoMessage_DeviceMeasurementInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DeviceInfoMessage.DeviceMeasurementInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DeviceInfoMessage.DeviceMeasurementInfo.READING_TYPE readingType = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->readingtype(), target);
  }

  // optional string units = 2 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->units().data(), static_cast<int>(this->units().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfoMessage.DeviceMeasurementInfo.units");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->units(), target);
  }

  // optional uint32 minSensorLimit = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->minsensorlimit(), target);
  }

  // optional uint32 maxSensorLimit = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxsensorlimit(), target);
  }

  // optional uint32 minErrorBound = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->minerrorbound(), target);
  }

  // optional uint32 maxErrorBound = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->maxerrorbound(), target);
  }

  // optional uint32 resolution = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->resolution(), target);
  }

  // optional uint32 accuracy = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->accuracy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceInfoMessage.DeviceMeasurementInfo)
  return target;
}

size_t DeviceInfoMessage_DeviceMeasurementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceInfoMessage.DeviceMeasurementInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string units = 2 [(.nanopb) = {
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // optional uint32 minSensorLimit = 3;
    if (has_minsensorlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minsensorlimit());
    }

    // optional uint32 maxSensorLimit = 4;
    if (has_maxsensorlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxsensorlimit());
    }

    // optional uint32 minErrorBound = 5;
    if (has_minerrorbound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minerrorbound());
    }

    // optional uint32 maxErrorBound = 6;
    if (has_maxerrorbound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxerrorbound());
    }

    // optional uint32 resolution = 7;
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resolution());
    }

    // optional uint32 accuracy = 8;
    if (has_accuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accuracy());
    }

    // optional .DeviceInfoMessage.DeviceMeasurementInfo.READING_TYPE readingType = 1;
    if (has_readingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->readingtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfoMessage_DeviceMeasurementInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceInfoMessage.DeviceMeasurementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfoMessage_DeviceMeasurementInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceInfoMessage_DeviceMeasurementInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceInfoMessage.DeviceMeasurementInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceInfoMessage.DeviceMeasurementInfo)
    MergeFrom(*source);
  }
}

void DeviceInfoMessage_DeviceMeasurementInfo::MergeFrom(const DeviceInfoMessage_DeviceMeasurementInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceInfoMessage.DeviceMeasurementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_units();
      units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
    }
    if (cached_has_bits & 0x00000002u) {
      minsensorlimit_ = from.minsensorlimit_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxsensorlimit_ = from.maxsensorlimit_;
    }
    if (cached_has_bits & 0x00000008u) {
      minerrorbound_ = from.minerrorbound_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxerrorbound_ = from.maxerrorbound_;
    }
    if (cached_has_bits & 0x00000020u) {
      resolution_ = from.resolution_;
    }
    if (cached_has_bits & 0x00000040u) {
      accuracy_ = from.accuracy_;
    }
    if (cached_has_bits & 0x00000080u) {
      readingtype_ = from.readingtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceInfoMessage_DeviceMeasurementInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceInfoMessage.DeviceMeasurementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfoMessage_DeviceMeasurementInfo::CopyFrom(const DeviceInfoMessage_DeviceMeasurementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceInfoMessage.DeviceMeasurementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfoMessage_DeviceMeasurementInfo::IsInitialized() const {
  return true;
}

void DeviceInfoMessage_DeviceMeasurementInfo::Swap(DeviceInfoMessage_DeviceMeasurementInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfoMessage_DeviceMeasurementInfo::InternalSwap(DeviceInfoMessage_DeviceMeasurementInfo* other) {
  using std::swap;
  units_.Swap(&other->units_);
  swap(minsensorlimit_, other->minsensorlimit_);
  swap(maxsensorlimit_, other->maxsensorlimit_);
  swap(minerrorbound_, other->minerrorbound_);
  swap(maxerrorbound_, other->maxerrorbound_);
  swap(resolution_, other->resolution_);
  swap(accuracy_, other->accuracy_);
  swap(readingtype_, other->readingtype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceInfoMessage_DeviceMeasurementInfo::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceInfoMessage_DeviceMeasurementInfo

// optional .DeviceInfoMessage.DeviceMeasurementInfo.READING_TYPE readingType = 1;
bool DeviceInfoMessage_DeviceMeasurementInfo::has_readingtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_has_readingtype() {
  _has_bits_[0] |= 0x00000080u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_readingtype() {
  _has_bits_[0] &= ~0x00000080u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_readingtype() {
  readingtype_ = 1;
  clear_has_readingtype();
}
::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE DeviceInfoMessage_DeviceMeasurementInfo::readingtype() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.readingType)
  return static_cast< ::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE >(readingtype_);
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_readingtype(::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE value) {
  assert(::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_IsValid(value));
  set_has_readingtype();
  readingtype_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.readingType)
}

// optional string units = 2 [(.nanopb) = {
bool DeviceInfoMessage_DeviceMeasurementInfo::has_units() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_has_units() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_units() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_units() {
  units_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_units();
}
const ::std::string& DeviceInfoMessage_DeviceMeasurementInfo::units() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.units)
  return units_.GetNoArena();
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_units(const ::std::string& value) {
  set_has_units();
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.units)
}
#if LANG_CXX11
void DeviceInfoMessage_DeviceMeasurementInfo::set_units(::std::string&& value) {
  set_has_units();
  units_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceInfoMessage.DeviceMeasurementInfo.units)
}
#endif
void DeviceInfoMessage_DeviceMeasurementInfo::set_units(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_units();
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceInfoMessage.DeviceMeasurementInfo.units)
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_units(const char* value, size_t size) {
  set_has_units();
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceInfoMessage.DeviceMeasurementInfo.units)
}
::std::string* DeviceInfoMessage_DeviceMeasurementInfo::mutable_units() {
  set_has_units();
  // @@protoc_insertion_point(field_mutable:DeviceInfoMessage.DeviceMeasurementInfo.units)
  return units_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfoMessage_DeviceMeasurementInfo::release_units() {
  // @@protoc_insertion_point(field_release:DeviceInfoMessage.DeviceMeasurementInfo.units)
  clear_has_units();
  return units_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_allocated_units(::std::string* units) {
  if (units != NULL) {
    set_has_units();
  } else {
    clear_has_units();
  }
  units_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), units);
  // @@protoc_insertion_point(field_set_allocated:DeviceInfoMessage.DeviceMeasurementInfo.units)
}

// optional uint32 minSensorLimit = 3;
bool DeviceInfoMessage_DeviceMeasurementInfo::has_minsensorlimit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_has_minsensorlimit() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_minsensorlimit() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_minsensorlimit() {
  minsensorlimit_ = 0u;
  clear_has_minsensorlimit();
}
::google::protobuf::uint32 DeviceInfoMessage_DeviceMeasurementInfo::minsensorlimit() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.minSensorLimit)
  return minsensorlimit_;
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_minsensorlimit(::google::protobuf::uint32 value) {
  set_has_minsensorlimit();
  minsensorlimit_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.minSensorLimit)
}

// optional uint32 maxSensorLimit = 4;
bool DeviceInfoMessage_DeviceMeasurementInfo::has_maxsensorlimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_has_maxsensorlimit() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_maxsensorlimit() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_maxsensorlimit() {
  maxsensorlimit_ = 0u;
  clear_has_maxsensorlimit();
}
::google::protobuf::uint32 DeviceInfoMessage_DeviceMeasurementInfo::maxsensorlimit() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.maxSensorLimit)
  return maxsensorlimit_;
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_maxsensorlimit(::google::protobuf::uint32 value) {
  set_has_maxsensorlimit();
  maxsensorlimit_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.maxSensorLimit)
}

// optional uint32 minErrorBound = 5;
bool DeviceInfoMessage_DeviceMeasurementInfo::has_minerrorbound() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_has_minerrorbound() {
  _has_bits_[0] |= 0x00000008u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_minerrorbound() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_minerrorbound() {
  minerrorbound_ = 0u;
  clear_has_minerrorbound();
}
::google::protobuf::uint32 DeviceInfoMessage_DeviceMeasurementInfo::minerrorbound() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.minErrorBound)
  return minerrorbound_;
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_minerrorbound(::google::protobuf::uint32 value) {
  set_has_minerrorbound();
  minerrorbound_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.minErrorBound)
}

// optional uint32 maxErrorBound = 6;
bool DeviceInfoMessage_DeviceMeasurementInfo::has_maxerrorbound() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_has_maxerrorbound() {
  _has_bits_[0] |= 0x00000010u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_maxerrorbound() {
  _has_bits_[0] &= ~0x00000010u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_maxerrorbound() {
  maxerrorbound_ = 0u;
  clear_has_maxerrorbound();
}
::google::protobuf::uint32 DeviceInfoMessage_DeviceMeasurementInfo::maxerrorbound() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.maxErrorBound)
  return maxerrorbound_;
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_maxerrorbound(::google::protobuf::uint32 value) {
  set_has_maxerrorbound();
  maxerrorbound_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.maxErrorBound)
}

// optional uint32 resolution = 7;
bool DeviceInfoMessage_DeviceMeasurementInfo::has_resolution() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_has_resolution() {
  _has_bits_[0] |= 0x00000020u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000020u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_resolution() {
  resolution_ = 0u;
  clear_has_resolution();
}
::google::protobuf::uint32 DeviceInfoMessage_DeviceMeasurementInfo::resolution() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.resolution)
  return resolution_;
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_resolution(::google::protobuf::uint32 value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.resolution)
}

// optional uint32 accuracy = 8;
bool DeviceInfoMessage_DeviceMeasurementInfo::has_accuracy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_has_accuracy() {
  _has_bits_[0] |= 0x00000040u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_accuracy() {
  _has_bits_[0] &= ~0x00000040u;
}
void DeviceInfoMessage_DeviceMeasurementInfo::clear_accuracy() {
  accuracy_ = 0u;
  clear_has_accuracy();
}
::google::protobuf::uint32 DeviceInfoMessage_DeviceMeasurementInfo::accuracy() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.accuracy)
  return accuracy_;
}
void DeviceInfoMessage_DeviceMeasurementInfo::set_accuracy(::google::protobuf::uint32 value) {
  set_has_accuracy();
  accuracy_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.accuracy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfoMessage_DeviceDelayInfo::kExpectedSampleDelayFieldNumber;
const int DeviceInfoMessage_DeviceDelayInfo::kLongestAcceptedSampleDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfoMessage_DeviceDelayInfo::DeviceInfoMessage_DeviceDelayInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_telemetry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceInfoMessage.DeviceDelayInfo)
}
DeviceInfoMessage_DeviceDelayInfo::DeviceInfoMessage_DeviceDelayInfo(const DeviceInfoMessage_DeviceDelayInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&expectedsampledelay_, &from.expectedsampledelay_,
    static_cast<size_t>(reinterpret_cast<char*>(&longestacceptedsampledelay_) -
    reinterpret_cast<char*>(&expectedsampledelay_)) + sizeof(longestacceptedsampledelay_));
  // @@protoc_insertion_point(copy_constructor:DeviceInfoMessage.DeviceDelayInfo)
}

void DeviceInfoMessage_DeviceDelayInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&expectedsampledelay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longestacceptedsampledelay_) -
      reinterpret_cast<char*>(&expectedsampledelay_)) + sizeof(longestacceptedsampledelay_));
}

DeviceInfoMessage_DeviceDelayInfo::~DeviceInfoMessage_DeviceDelayInfo() {
  // @@protoc_insertion_point(destructor:DeviceInfoMessage.DeviceDelayInfo)
  SharedDtor();
}

void DeviceInfoMessage_DeviceDelayInfo::SharedDtor() {
}

void DeviceInfoMessage_DeviceDelayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfoMessage_DeviceDelayInfo::descriptor() {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceInfoMessage_DeviceDelayInfo& DeviceInfoMessage_DeviceDelayInfo::default_instance() {
  protobuf_telemetry_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceInfoMessage_DeviceDelayInfo* DeviceInfoMessage_DeviceDelayInfo::New(::google::protobuf::Arena* arena) const {
  DeviceInfoMessage_DeviceDelayInfo* n = new DeviceInfoMessage_DeviceDelayInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceInfoMessage_DeviceDelayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceInfoMessage.DeviceDelayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&expectedsampledelay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longestacceptedsampledelay_) -
        reinterpret_cast<char*>(&expectedsampledelay_)) + sizeof(longestacceptedsampledelay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceInfoMessage_DeviceDelayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceInfoMessage.DeviceDelayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expectedSampleDelay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_expectedsampledelay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expectedsampledelay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 longestAcceptedSampleDelay = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_longestacceptedsampledelay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &longestacceptedsampledelay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceInfoMessage.DeviceDelayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceInfoMessage.DeviceDelayInfo)
  return false;
#undef DO_
}

void DeviceInfoMessage_DeviceDelayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceInfoMessage.DeviceDelayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 expectedSampleDelay = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expectedsampledelay(), output);
  }

  // optional uint32 longestAcceptedSampleDelay = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->longestacceptedsampledelay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceInfoMessage.DeviceDelayInfo)
}

::google::protobuf::uint8* DeviceInfoMessage_DeviceDelayInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DeviceInfoMessage.DeviceDelayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 expectedSampleDelay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expectedsampledelay(), target);
  }

  // optional uint32 longestAcceptedSampleDelay = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->longestacceptedsampledelay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceInfoMessage.DeviceDelayInfo)
  return target;
}

size_t DeviceInfoMessage_DeviceDelayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceInfoMessage.DeviceDelayInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 expectedSampleDelay = 1;
    if (has_expectedsampledelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expectedsampledelay());
    }

    // optional uint32 longestAcceptedSampleDelay = 2;
    if (has_longestacceptedsampledelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->longestacceptedsampledelay());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfoMessage_DeviceDelayInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceInfoMessage.DeviceDelayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfoMessage_DeviceDelayInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceInfoMessage_DeviceDelayInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceInfoMessage.DeviceDelayInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceInfoMessage.DeviceDelayInfo)
    MergeFrom(*source);
  }
}

void DeviceInfoMessage_DeviceDelayInfo::MergeFrom(const DeviceInfoMessage_DeviceDelayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceInfoMessage.DeviceDelayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      expectedsampledelay_ = from.expectedsampledelay_;
    }
    if (cached_has_bits & 0x00000002u) {
      longestacceptedsampledelay_ = from.longestacceptedsampledelay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceInfoMessage_DeviceDelayInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceInfoMessage.DeviceDelayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfoMessage_DeviceDelayInfo::CopyFrom(const DeviceInfoMessage_DeviceDelayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceInfoMessage.DeviceDelayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfoMessage_DeviceDelayInfo::IsInitialized() const {
  return true;
}

void DeviceInfoMessage_DeviceDelayInfo::Swap(DeviceInfoMessage_DeviceDelayInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfoMessage_DeviceDelayInfo::InternalSwap(DeviceInfoMessage_DeviceDelayInfo* other) {
  using std::swap;
  swap(expectedsampledelay_, other->expectedsampledelay_);
  swap(longestacceptedsampledelay_, other->longestacceptedsampledelay_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceInfoMessage_DeviceDelayInfo::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceInfoMessage_DeviceDelayInfo

// optional uint32 expectedSampleDelay = 1;
bool DeviceInfoMessage_DeviceDelayInfo::has_expectedsampledelay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceInfoMessage_DeviceDelayInfo::set_has_expectedsampledelay() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceInfoMessage_DeviceDelayInfo::clear_has_expectedsampledelay() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceInfoMessage_DeviceDelayInfo::clear_expectedsampledelay() {
  expectedsampledelay_ = 0u;
  clear_has_expectedsampledelay();
}
::google::protobuf::uint32 DeviceInfoMessage_DeviceDelayInfo::expectedsampledelay() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceDelayInfo.expectedSampleDelay)
  return expectedsampledelay_;
}
void DeviceInfoMessage_DeviceDelayInfo::set_expectedsampledelay(::google::protobuf::uint32 value) {
  set_has_expectedsampledelay();
  expectedsampledelay_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceDelayInfo.expectedSampleDelay)
}

// optional uint32 longestAcceptedSampleDelay = 2;
bool DeviceInfoMessage_DeviceDelayInfo::has_longestacceptedsampledelay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceInfoMessage_DeviceDelayInfo::set_has_longestacceptedsampledelay() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceInfoMessage_DeviceDelayInfo::clear_has_longestacceptedsampledelay() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceInfoMessage_DeviceDelayInfo::clear_longestacceptedsampledelay() {
  longestacceptedsampledelay_ = 0u;
  clear_has_longestacceptedsampledelay();
}
::google::protobuf::uint32 DeviceInfoMessage_DeviceDelayInfo::longestacceptedsampledelay() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceDelayInfo.longestAcceptedSampleDelay)
  return longestacceptedsampledelay_;
}
void DeviceInfoMessage_DeviceDelayInfo::set_longestacceptedsampledelay(::google::protobuf::uint32 value) {
  set_has_longestacceptedsampledelay();
  longestacceptedsampledelay_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceDelayInfo.longestAcceptedSampleDelay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfoMessage::kIdFieldNumber;
const int DeviceInfoMessage::kNameFieldNumber;
const int DeviceInfoMessage::kMeasurementInfoFieldNumber;
const int DeviceInfoMessage::kDelayInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfoMessage::DeviceInfoMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_telemetry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceInfoMessage)
}
DeviceInfoMessage::DeviceInfoMessage(const DeviceInfoMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_measurementinfo()) {
    measurementinfo_ = new ::DeviceInfoMessage_DeviceMeasurementInfo(*from.measurementinfo_);
  } else {
    measurementinfo_ = NULL;
  }
  if (from.has_delayinfo()) {
    delayinfo_ = new ::DeviceInfoMessage_DeviceDelayInfo(*from.delayinfo_);
  } else {
    delayinfo_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:DeviceInfoMessage)
}

void DeviceInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&measurementinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&measurementinfo_)) + sizeof(id_));
}

DeviceInfoMessage::~DeviceInfoMessage() {
  // @@protoc_insertion_point(destructor:DeviceInfoMessage)
  SharedDtor();
}

void DeviceInfoMessage::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete measurementinfo_;
  if (this != internal_default_instance()) delete delayinfo_;
}

void DeviceInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfoMessage::descriptor() {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceInfoMessage& DeviceInfoMessage::default_instance() {
  protobuf_telemetry_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceInfoMessage* DeviceInfoMessage::New(::google::protobuf::Arena* arena) const {
  DeviceInfoMessage* n = new DeviceInfoMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceInfoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceInfoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(measurementinfo_ != NULL);
      measurementinfo_->::DeviceInfoMessage_DeviceMeasurementInfo::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(delayinfo_ != NULL);
      delayinfo_->::DeviceInfoMessage_DeviceDelayInfo::Clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceInfoMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2 [(.nanopb) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceInfoMessage.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DeviceInfoMessage.DeviceMeasurementInfo measurementInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_measurementinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DeviceInfoMessage.DeviceDelayInfo delayInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delayinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceInfoMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceInfoMessage)
  return false;
#undef DO_
}

void DeviceInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceInfoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfoMessage.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .DeviceInfoMessage.DeviceMeasurementInfo measurementInfo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->measurementinfo_, output);
  }

  // optional .DeviceInfoMessage.DeviceDelayInfo delayInfo = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->delayinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceInfoMessage)
}

::google::protobuf::uint8* DeviceInfoMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DeviceInfoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceInfoMessage.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .DeviceInfoMessage.DeviceMeasurementInfo measurementInfo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->measurementinfo_, deterministic, target);
  }

  // optional .DeviceInfoMessage.DeviceDelayInfo delayInfo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->delayinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceInfoMessage)
  return target;
}

size_t DeviceInfoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceInfoMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 2 [(.nanopb) = {
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .DeviceInfoMessage.DeviceMeasurementInfo measurementInfo = 3;
    if (has_measurementinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->measurementinfo_);
    }

    // optional .DeviceInfoMessage.DeviceDelayInfo delayInfo = 4;
    if (has_delayinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->delayinfo_);
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceInfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfoMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceInfoMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceInfoMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceInfoMessage)
    MergeFrom(*source);
  }
}

void DeviceInfoMessage::MergeFrom(const DeviceInfoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceInfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_measurementinfo()->::DeviceInfoMessage_DeviceMeasurementInfo::MergeFrom(from.measurementinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_delayinfo()->::DeviceInfoMessage_DeviceDelayInfo::MergeFrom(from.delayinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfoMessage::CopyFrom(const DeviceInfoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfoMessage::IsInitialized() const {
  return true;
}

void DeviceInfoMessage::Swap(DeviceInfoMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfoMessage::InternalSwap(DeviceInfoMessage* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(measurementinfo_, other->measurementinfo_);
  swap(delayinfo_, other->delayinfo_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceInfoMessage::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceInfoMessage

// optional uint32 id = 1;
bool DeviceInfoMessage::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceInfoMessage::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void DeviceInfoMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeviceInfoMessage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 DeviceInfoMessage::id() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.id)
  return id_;
}
void DeviceInfoMessage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.id)
}

// optional string name = 2 [(.nanopb) = {
bool DeviceInfoMessage::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceInfoMessage::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceInfoMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceInfoMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& DeviceInfoMessage::name() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.name)
  return name_.GetNoArena();
}
void DeviceInfoMessage::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.name)
}
#if LANG_CXX11
void DeviceInfoMessage::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceInfoMessage.name)
}
#endif
void DeviceInfoMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceInfoMessage.name)
}
void DeviceInfoMessage::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceInfoMessage.name)
}
::std::string* DeviceInfoMessage::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:DeviceInfoMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfoMessage::release_name() {
  // @@protoc_insertion_point(field_release:DeviceInfoMessage.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfoMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DeviceInfoMessage.name)
}

// optional .DeviceInfoMessage.DeviceMeasurementInfo measurementInfo = 3;
bool DeviceInfoMessage::has_measurementinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceInfoMessage::set_has_measurementinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceInfoMessage::clear_has_measurementinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceInfoMessage::clear_measurementinfo() {
  if (measurementinfo_ != NULL) measurementinfo_->::DeviceInfoMessage_DeviceMeasurementInfo::Clear();
  clear_has_measurementinfo();
}
const ::DeviceInfoMessage_DeviceMeasurementInfo& DeviceInfoMessage::measurementinfo() const {
  const ::DeviceInfoMessage_DeviceMeasurementInfo* p = measurementinfo_;
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.measurementInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::DeviceInfoMessage_DeviceMeasurementInfo*>(
      &::_DeviceInfoMessage_DeviceMeasurementInfo_default_instance_);
}
::DeviceInfoMessage_DeviceMeasurementInfo* DeviceInfoMessage::mutable_measurementinfo() {
  set_has_measurementinfo();
  if (measurementinfo_ == NULL) {
    measurementinfo_ = new ::DeviceInfoMessage_DeviceMeasurementInfo;
  }
  // @@protoc_insertion_point(field_mutable:DeviceInfoMessage.measurementInfo)
  return measurementinfo_;
}
::DeviceInfoMessage_DeviceMeasurementInfo* DeviceInfoMessage::release_measurementinfo() {
  // @@protoc_insertion_point(field_release:DeviceInfoMessage.measurementInfo)
  clear_has_measurementinfo();
  ::DeviceInfoMessage_DeviceMeasurementInfo* temp = measurementinfo_;
  measurementinfo_ = NULL;
  return temp;
}
void DeviceInfoMessage::set_allocated_measurementinfo(::DeviceInfoMessage_DeviceMeasurementInfo* measurementinfo) {
  delete measurementinfo_;
  measurementinfo_ = measurementinfo;
  if (measurementinfo) {
    set_has_measurementinfo();
  } else {
    clear_has_measurementinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceInfoMessage.measurementInfo)
}

// optional .DeviceInfoMessage.DeviceDelayInfo delayInfo = 4;
bool DeviceInfoMessage::has_delayinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceInfoMessage::set_has_delayinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceInfoMessage::clear_has_delayinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceInfoMessage::clear_delayinfo() {
  if (delayinfo_ != NULL) delayinfo_->::DeviceInfoMessage_DeviceDelayInfo::Clear();
  clear_has_delayinfo();
}
const ::DeviceInfoMessage_DeviceDelayInfo& DeviceInfoMessage::delayinfo() const {
  const ::DeviceInfoMessage_DeviceDelayInfo* p = delayinfo_;
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.delayInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::DeviceInfoMessage_DeviceDelayInfo*>(
      &::_DeviceInfoMessage_DeviceDelayInfo_default_instance_);
}
::DeviceInfoMessage_DeviceDelayInfo* DeviceInfoMessage::mutable_delayinfo() {
  set_has_delayinfo();
  if (delayinfo_ == NULL) {
    delayinfo_ = new ::DeviceInfoMessage_DeviceDelayInfo;
  }
  // @@protoc_insertion_point(field_mutable:DeviceInfoMessage.delayInfo)
  return delayinfo_;
}
::DeviceInfoMessage_DeviceDelayInfo* DeviceInfoMessage::release_delayinfo() {
  // @@protoc_insertion_point(field_release:DeviceInfoMessage.delayInfo)
  clear_has_delayinfo();
  ::DeviceInfoMessage_DeviceDelayInfo* temp = delayinfo_;
  delayinfo_ = NULL;
  return temp;
}
void DeviceInfoMessage::set_allocated_delayinfo(::DeviceInfoMessage_DeviceDelayInfo* delayinfo) {
  delete delayinfo_;
  delayinfo_ = delayinfo;
  if (delayinfo) {
    set_has_delayinfo();
  } else {
    clear_has_delayinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceInfoMessage.delayInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatisticalAggregate::kNumSamplesFieldNumber;
const int StatisticalAggregate::kMinFieldNumber;
const int StatisticalAggregate::kMaxFieldNumber;
const int StatisticalAggregate::kMeanFieldNumber;
const int StatisticalAggregate::kStdevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatisticalAggregate::StatisticalAggregate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_telemetry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:StatisticalAggregate)
}
StatisticalAggregate::StatisticalAggregate(const StatisticalAggregate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&numsamples_, &from.numsamples_,
    static_cast<size_t>(reinterpret_cast<char*>(&stdev_) -
    reinterpret_cast<char*>(&numsamples_)) + sizeof(stdev_));
  // @@protoc_insertion_point(copy_constructor:StatisticalAggregate)
}

void StatisticalAggregate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&numsamples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stdev_) -
      reinterpret_cast<char*>(&numsamples_)) + sizeof(stdev_));
}

StatisticalAggregate::~StatisticalAggregate() {
  // @@protoc_insertion_point(destructor:StatisticalAggregate)
  SharedDtor();
}

void StatisticalAggregate::SharedDtor() {
}

void StatisticalAggregate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticalAggregate::descriptor() {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatisticalAggregate& StatisticalAggregate::default_instance() {
  protobuf_telemetry_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatisticalAggregate* StatisticalAggregate::New(::google::protobuf::Arena* arena) const {
  StatisticalAggregate* n = new StatisticalAggregate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatisticalAggregate::Clear() {
// @@protoc_insertion_point(message_clear_start:StatisticalAggregate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&numsamples_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stdev_) -
        reinterpret_cast<char*>(&numsamples_)) + sizeof(stdev_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StatisticalAggregate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StatisticalAggregate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 numSamples = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_numsamples();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numsamples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mean = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stdev = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_stdev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stdev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StatisticalAggregate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StatisticalAggregate)
  return false;
#undef DO_
}

void StatisticalAggregate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StatisticalAggregate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 numSamples = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->numsamples(), output);
  }

  // optional uint32 min = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min(), output);
  }

  // optional uint32 max = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max(), output);
  }

  // optional uint32 mean = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mean(), output);
  }

  // optional uint32 stdev = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stdev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StatisticalAggregate)
}

::google::protobuf::uint8* StatisticalAggregate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StatisticalAggregate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 numSamples = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->numsamples(), target);
  }

  // optional uint32 min = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min(), target);
  }

  // optional uint32 max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max(), target);
  }

  // optional uint32 mean = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mean(), target);
  }

  // optional uint32 stdev = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stdev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatisticalAggregate)
  return target;
}

size_t StatisticalAggregate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatisticalAggregate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 numSamples = 1;
    if (has_numsamples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numsamples());
    }

    // optional uint32 min = 2;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min());
    }

    // optional uint32 max = 3;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max());
    }

    // optional uint32 mean = 4;
    if (has_mean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mean());
    }

    // optional uint32 stdev = 5;
    if (has_stdev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stdev());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticalAggregate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StatisticalAggregate)
  GOOGLE_DCHECK_NE(&from, this);
  const StatisticalAggregate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatisticalAggregate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StatisticalAggregate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StatisticalAggregate)
    MergeFrom(*source);
  }
}

void StatisticalAggregate::MergeFrom(const StatisticalAggregate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatisticalAggregate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      numsamples_ = from.numsamples_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000008u) {
      mean_ = from.mean_;
    }
    if (cached_has_bits & 0x00000010u) {
      stdev_ = from.stdev_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatisticalAggregate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StatisticalAggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticalAggregate::CopyFrom(const StatisticalAggregate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatisticalAggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticalAggregate::IsInitialized() const {
  return true;
}

void StatisticalAggregate::Swap(StatisticalAggregate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatisticalAggregate::InternalSwap(StatisticalAggregate* other) {
  using std::swap;
  swap(numsamples_, other->numsamples_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(mean_, other->mean_);
  swap(stdev_, other->stdev_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatisticalAggregate::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatisticalAggregate

// optional uint32 numSamples = 1;
bool StatisticalAggregate::has_numsamples() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StatisticalAggregate::set_has_numsamples() {
  _has_bits_[0] |= 0x00000001u;
}
void StatisticalAggregate::clear_has_numsamples() {
  _has_bits_[0] &= ~0x00000001u;
}
void StatisticalAggregate::clear_numsamples() {
  numsamples_ = 0u;
  clear_has_numsamples();
}
::google::protobuf::uint32 StatisticalAggregate::numsamples() const {
  // @@protoc_insertion_point(field_get:StatisticalAggregate.numSamples)
  return numsamples_;
}
void StatisticalAggregate::set_numsamples(::google::protobuf::uint32 value) {
  set_has_numsamples();
  numsamples_ = value;
  // @@protoc_insertion_point(field_set:StatisticalAggregate.numSamples)
}

// optional uint32 min = 2;
bool StatisticalAggregate::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StatisticalAggregate::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
void StatisticalAggregate::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
void StatisticalAggregate::clear_min() {
  min_ = 0u;
  clear_has_min();
}
::google::protobuf::uint32 StatisticalAggregate::min() const {
  // @@protoc_insertion_point(field_get:StatisticalAggregate.min)
  return min_;
}
void StatisticalAggregate::set_min(::google::protobuf::uint32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:StatisticalAggregate.min)
}

// optional uint32 max = 3;
bool StatisticalAggregate::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StatisticalAggregate::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
void StatisticalAggregate::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void StatisticalAggregate::clear_max() {
  max_ = 0u;
  clear_has_max();
}
::google::protobuf::uint32 StatisticalAggregate::max() const {
  // @@protoc_insertion_point(field_get:StatisticalAggregate.max)
  return max_;
}
void StatisticalAggregate::set_max(::google::protobuf::uint32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:StatisticalAggregate.max)
}

// optional uint32 mean = 4;
bool StatisticalAggregate::has_mean() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StatisticalAggregate::set_has_mean() {
  _has_bits_[0] |= 0x00000008u;
}
void StatisticalAggregate::clear_has_mean() {
  _has_bits_[0] &= ~0x00000008u;
}
void StatisticalAggregate::clear_mean() {
  mean_ = 0u;
  clear_has_mean();
}
::google::protobuf::uint32 StatisticalAggregate::mean() const {
  // @@protoc_insertion_point(field_get:StatisticalAggregate.mean)
  return mean_;
}
void StatisticalAggregate::set_mean(::google::protobuf::uint32 value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:StatisticalAggregate.mean)
}

// optional uint32 stdev = 5;
bool StatisticalAggregate::has_stdev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StatisticalAggregate::set_has_stdev() {
  _has_bits_[0] |= 0x00000010u;
}
void StatisticalAggregate::clear_has_stdev() {
  _has_bits_[0] &= ~0x00000010u;
}
void StatisticalAggregate::clear_stdev() {
  stdev_ = 0u;
  clear_has_stdev();
}
::google::protobuf::uint32 StatisticalAggregate::stdev() const {
  // @@protoc_insertion_point(field_get:StatisticalAggregate.stdev)
  return stdev_;
}
void StatisticalAggregate::set_stdev(::google::protobuf::uint32 value) {
  set_has_stdev();
  stdev_ = value;
  // @@protoc_insertion_point(field_set:StatisticalAggregate.stdev)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeasurementAggregate::kReadingFieldNumber;
const int MeasurementAggregate::kSampleDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeasurementAggregate::MeasurementAggregate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_telemetry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MeasurementAggregate)
}
MeasurementAggregate::MeasurementAggregate(const MeasurementAggregate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reading()) {
    reading_ = new ::StatisticalAggregate(*from.reading_);
  } else {
    reading_ = NULL;
  }
  if (from.has_sampledelay()) {
    sampledelay_ = new ::StatisticalAggregate(*from.sampledelay_);
  } else {
    sampledelay_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MeasurementAggregate)
}

void MeasurementAggregate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&reading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sampledelay_) -
      reinterpret_cast<char*>(&reading_)) + sizeof(sampledelay_));
}

MeasurementAggregate::~MeasurementAggregate() {
  // @@protoc_insertion_point(destructor:MeasurementAggregate)
  SharedDtor();
}

void MeasurementAggregate::SharedDtor() {
  if (this != internal_default_instance()) delete reading_;
  if (this != internal_default_instance()) delete sampledelay_;
}

void MeasurementAggregate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeasurementAggregate::descriptor() {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MeasurementAggregate& MeasurementAggregate::default_instance() {
  protobuf_telemetry_2eproto::InitDefaults();
  return *internal_default_instance();
}

MeasurementAggregate* MeasurementAggregate::New(::google::protobuf::Arena* arena) const {
  MeasurementAggregate* n = new MeasurementAggregate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MeasurementAggregate::Clear() {
// @@protoc_insertion_point(message_clear_start:MeasurementAggregate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(reading_ != NULL);
      reading_->::StatisticalAggregate::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sampledelay_ != NULL);
      sampledelay_->::StatisticalAggregate::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MeasurementAggregate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MeasurementAggregate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .StatisticalAggregate reading = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .StatisticalAggregate sampleDelay = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sampledelay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MeasurementAggregate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MeasurementAggregate)
  return false;
#undef DO_
}

void MeasurementAggregate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MeasurementAggregate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .StatisticalAggregate reading = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->reading_, output);
  }

  // optional .StatisticalAggregate sampleDelay = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sampledelay_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MeasurementAggregate)
}

::google::protobuf::uint8* MeasurementAggregate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MeasurementAggregate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .StatisticalAggregate reading = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->reading_, deterministic, target);
  }

  // optional .StatisticalAggregate sampleDelay = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sampledelay_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MeasurementAggregate)
  return target;
}

size_t MeasurementAggregate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MeasurementAggregate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .StatisticalAggregate reading = 1;
    if (has_reading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reading_);
    }

    // optional .StatisticalAggregate sampleDelay = 2;
    if (has_sampledelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sampledelay_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeasurementAggregate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MeasurementAggregate)
  GOOGLE_DCHECK_NE(&from, this);
  const MeasurementAggregate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeasurementAggregate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MeasurementAggregate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MeasurementAggregate)
    MergeFrom(*source);
  }
}

void MeasurementAggregate::MergeFrom(const MeasurementAggregate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MeasurementAggregate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reading()->::StatisticalAggregate::MergeFrom(from.reading());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sampledelay()->::StatisticalAggregate::MergeFrom(from.sampledelay());
    }
  }
}

void MeasurementAggregate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MeasurementAggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeasurementAggregate::CopyFrom(const MeasurementAggregate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MeasurementAggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasurementAggregate::IsInitialized() const {
  return true;
}

void MeasurementAggregate::Swap(MeasurementAggregate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeasurementAggregate::InternalSwap(MeasurementAggregate* other) {
  using std::swap;
  swap(reading_, other->reading_);
  swap(sampledelay_, other->sampledelay_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MeasurementAggregate::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MeasurementAggregate

// optional .StatisticalAggregate reading = 1;
bool MeasurementAggregate::has_reading() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MeasurementAggregate::set_has_reading() {
  _has_bits_[0] |= 0x00000001u;
}
void MeasurementAggregate::clear_has_reading() {
  _has_bits_[0] &= ~0x00000001u;
}
void MeasurementAggregate::clear_reading() {
  if (reading_ != NULL) reading_->::StatisticalAggregate::Clear();
  clear_has_reading();
}
const ::StatisticalAggregate& MeasurementAggregate::reading() const {
  const ::StatisticalAggregate* p = reading_;
  // @@protoc_insertion_point(field_get:MeasurementAggregate.reading)
  return p != NULL ? *p : *reinterpret_cast<const ::StatisticalAggregate*>(
      &::_StatisticalAggregate_default_instance_);
}
::StatisticalAggregate* MeasurementAggregate::mutable_reading() {
  set_has_reading();
  if (reading_ == NULL) {
    reading_ = new ::StatisticalAggregate;
  }
  // @@protoc_insertion_point(field_mutable:MeasurementAggregate.reading)
  return reading_;
}
::StatisticalAggregate* MeasurementAggregate::release_reading() {
  // @@protoc_insertion_point(field_release:MeasurementAggregate.reading)
  clear_has_reading();
  ::StatisticalAggregate* temp = reading_;
  reading_ = NULL;
  return temp;
}
void MeasurementAggregate::set_allocated_reading(::StatisticalAggregate* reading) {
  delete reading_;
  reading_ = reading;
  if (reading) {
    set_has_reading();
  } else {
    clear_has_reading();
  }
  // @@protoc_insertion_point(field_set_allocated:MeasurementAggregate.reading)
}

// optional .StatisticalAggregate sampleDelay = 2;
bool MeasurementAggregate::has_sampledelay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MeasurementAggregate::set_has_sampledelay() {
  _has_bits_[0] |= 0x00000002u;
}
void MeasurementAggregate::clear_has_sampledelay() {
  _has_bits_[0] &= ~0x00000002u;
}
void MeasurementAggregate::clear_sampledelay() {
  if (sampledelay_ != NULL) sampledelay_->::StatisticalAggregate::Clear();
  clear_has_sampledelay();
}
const ::StatisticalAggregate& MeasurementAggregate::sampledelay() const {
  const ::StatisticalAggregate* p = sampledelay_;
  // @@protoc_insertion_point(field_get:MeasurementAggregate.sampleDelay)
  return p != NULL ? *p : *reinterpret_cast<const ::StatisticalAggregate*>(
      &::_StatisticalAggregate_default_instance_);
}
::StatisticalAggregate* MeasurementAggregate::mutable_sampledelay() {
  set_has_sampledelay();
  if (sampledelay_ == NULL) {
    sampledelay_ = new ::StatisticalAggregate;
  }
  // @@protoc_insertion_point(field_mutable:MeasurementAggregate.sampleDelay)
  return sampledelay_;
}
::StatisticalAggregate* MeasurementAggregate::release_sampledelay() {
  // @@protoc_insertion_point(field_release:MeasurementAggregate.sampleDelay)
  clear_has_sampledelay();
  ::StatisticalAggregate* temp = sampledelay_;
  sampledelay_ = NULL;
  return temp;
}
void MeasurementAggregate::set_allocated_sampledelay(::StatisticalAggregate* sampledelay) {
  delete sampledelay_;
  sampledelay_ = sampledelay;
  if (sampledelay) {
    set_has_sampledelay();
  } else {
    clear_has_sampledelay();
  }
  // @@protoc_insertion_point(field_set_allocated:MeasurementAggregate.sampleDelay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoMessage::kMessageTypeFieldNumber;
const int InfoMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoMessage::InfoMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_telemetry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InfoMessage)
}
InfoMessage::InfoMessage(const InfoMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  messagetype_ = from.messagetype_;
  // @@protoc_insertion_point(copy_constructor:InfoMessage)
}

void InfoMessage::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_ = 1;
}

InfoMessage::~InfoMessage() {
  // @@protoc_insertion_point(destructor:InfoMessage)
  SharedDtor();
}

void InfoMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoMessage::descriptor() {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfoMessage& InfoMessage::default_instance() {
  protobuf_telemetry_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfoMessage* InfoMessage::New(::google::protobuf::Arena* arena) const {
  InfoMessage* n = new InfoMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InfoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*message_.UnsafeRawStringPointer())->clear();
    }
    messagetype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InfoMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .InfoMessage.MESSAGE_TYPE messageType = 1 [default = INFO];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::InfoMessage_MESSAGE_TYPE_IsValid(value)) {
            set_messagetype(static_cast< ::InfoMessage_MESSAGE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2 [(.nanopb) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InfoMessage.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InfoMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InfoMessage)
  return false;
#undef DO_
}

void InfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InfoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .InfoMessage.MESSAGE_TYPE messageType = 1 [default = INFO];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }

  // optional string message = 2 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InfoMessage)
}

::google::protobuf::uint8* InfoMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InfoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .InfoMessage.MESSAGE_TYPE messageType = 1 [default = INFO];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->messagetype(), target);
  }

  // optional string message = 2 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InfoMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InfoMessage)
  return target;
}

size_t InfoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InfoMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string message = 2 [(.nanopb) = {
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .InfoMessage.MESSAGE_TYPE messageType = 1 [default = INFO];
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InfoMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InfoMessage)
    MergeFrom(*source);
  }
}

void InfoMessage::MergeFrom(const InfoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InfoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      messagetype_ = from.messagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoMessage::CopyFrom(const InfoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoMessage::IsInitialized() const {
  return true;
}

void InfoMessage::Swap(InfoMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoMessage::InternalSwap(InfoMessage* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(messagetype_, other->messagetype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoMessage::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfoMessage

// optional .InfoMessage.MESSAGE_TYPE messageType = 1 [default = INFO];
bool InfoMessage::has_messagetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InfoMessage::set_has_messagetype() {
  _has_bits_[0] |= 0x00000002u;
}
void InfoMessage::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000002u;
}
void InfoMessage::clear_messagetype() {
  messagetype_ = 1;
  clear_has_messagetype();
}
::InfoMessage_MESSAGE_TYPE InfoMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:InfoMessage.messageType)
  return static_cast< ::InfoMessage_MESSAGE_TYPE >(messagetype_);
}
void InfoMessage::set_messagetype(::InfoMessage_MESSAGE_TYPE value) {
  assert(::InfoMessage_MESSAGE_TYPE_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:InfoMessage.messageType)
}

// optional string message = 2 [(.nanopb) = {
bool InfoMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InfoMessage::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void InfoMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void InfoMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& InfoMessage::message() const {
  // @@protoc_insertion_point(field_get:InfoMessage.message)
  return message_.GetNoArena();
}
void InfoMessage::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InfoMessage.message)
}
#if LANG_CXX11
void InfoMessage::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InfoMessage.message)
}
#endif
void InfoMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InfoMessage.message)
}
void InfoMessage::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InfoMessage.message)
}
::std::string* InfoMessage::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:InfoMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InfoMessage::release_message() {
  // @@protoc_insertion_point(field_release:InfoMessage.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InfoMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:InfoMessage.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetryMessage::kIdFieldNumber;
const int TelemetryMessage::kTimestampMsFieldNumber;
const int TelemetryMessage::kTimestampVariabilityFieldNumber;
const int TelemetryMessage::kSensorReadingFieldNumber;
const int TelemetryMessage::kInfoMessageFieldNumber;
const int TelemetryMessage::kDeviceInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetryMessage::TelemetryMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_telemetry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TelemetryMessage)
}
TelemetryMessage::TelemetryMessage(const TelemetryMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_variability_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_variability_));
  clear_has_value();
  switch (from.value_case()) {
    case kSensorReading: {
      mutable_sensorreading()->::MeasurementAggregate::MergeFrom(from.sensorreading());
      break;
    }
    case kInfoMessage: {
      mutable_infomessage()->::InfoMessage::MergeFrom(from.infomessage());
      break;
    }
    case kDeviceInfo: {
      mutable_deviceinfo()->::DeviceInfoMessage::MergeFrom(from.deviceinfo());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TelemetryMessage)
}

void TelemetryMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_variability_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_variability_));
  clear_has_value();
}

TelemetryMessage::~TelemetryMessage() {
  // @@protoc_insertion_point(destructor:TelemetryMessage)
  SharedDtor();
}

void TelemetryMessage::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void TelemetryMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetryMessage::descriptor() {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetryMessage& TelemetryMessage::default_instance() {
  protobuf_telemetry_2eproto::InitDefaults();
  return *internal_default_instance();
}

TelemetryMessage* TelemetryMessage::New(::google::protobuf::Arena* arena) const {
  TelemetryMessage* n = new TelemetryMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetryMessage::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:TelemetryMessage)
  switch (value_case()) {
    case kSensorReading: {
      delete value_.sensorreading_;
      break;
    }
    case kInfoMessage: {
      delete value_.infomessage_;
      break;
    }
    case kDeviceInfo: {
      delete value_.deviceinfo_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void TelemetryMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TelemetryMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_variability_) -
        reinterpret_cast<char*>(&id_)) + sizeof(timestamp_variability_));
  }
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TelemetryMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TelemetryMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp_variability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp_variability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_variability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MeasurementAggregate sensorReading = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensorreading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .InfoMessage infoMessage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infomessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DeviceInfoMessage deviceInfo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deviceinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TelemetryMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TelemetryMessage)
  return false;
#undef DO_
}

void TelemetryMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TelemetryMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 timestamp_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp_ms(), output);
  }

  // optional uint32 timestamp_variability = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp_variability(), output);
  }

  switch (value_case()) {
    case kSensorReading:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *value_.sensorreading_, output);
      break;
    case kInfoMessage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *value_.infomessage_, output);
      break;
    case kDeviceInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *value_.deviceinfo_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TelemetryMessage)
}

::google::protobuf::uint8* TelemetryMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TelemetryMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 timestamp_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp_ms(), target);
  }

  // optional uint32 timestamp_variability = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp_variability(), target);
  }

  switch (value_case()) {
    case kSensorReading:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *value_.sensorreading_, deterministic, target);
      break;
    case kInfoMessage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *value_.infomessage_, deterministic, target);
      break;
    case kDeviceInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *value_.deviceinfo_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TelemetryMessage)
  return target;
}

size_t TelemetryMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TelemetryMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 timestamp_ms = 2;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp_ms());
    }

    // optional uint32 timestamp_variability = 3;
    if (has_timestamp_variability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp_variability());
    }

  }
  switch (value_case()) {
    // optional .MeasurementAggregate sensorReading = 4;
    case kSensorReading: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.sensorreading_);
      break;
    }
    // optional .InfoMessage infoMessage = 5;
    case kInfoMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.infomessage_);
      break;
    }
    // optional .DeviceInfoMessage deviceInfo = 6;
    case kDeviceInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.deviceinfo_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetryMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TelemetryMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetryMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TelemetryMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TelemetryMessage)
    MergeFrom(*source);
  }
}

void TelemetryMessage::MergeFrom(const TelemetryMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TelemetryMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ms_ = from.timestamp_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_variability_ = from.timestamp_variability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.value_case()) {
    case kSensorReading: {
      mutable_sensorreading()->::MeasurementAggregate::MergeFrom(from.sensorreading());
      break;
    }
    case kInfoMessage: {
      mutable_infomessage()->::InfoMessage::MergeFrom(from.infomessage());
      break;
    }
    case kDeviceInfo: {
      mutable_deviceinfo()->::DeviceInfoMessage::MergeFrom(from.deviceinfo());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void TelemetryMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TelemetryMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryMessage::CopyFrom(const TelemetryMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TelemetryMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryMessage::IsInitialized() const {
  return true;
}

void TelemetryMessage::Swap(TelemetryMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetryMessage::InternalSwap(TelemetryMessage* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(timestamp_variability_, other->timestamp_variability_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetryMessage::GetMetadata() const {
  protobuf_telemetry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_telemetry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TelemetryMessage

// optional uint32 id = 1;
bool TelemetryMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelemetryMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TelemetryMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelemetryMessage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 TelemetryMessage::id() const {
  // @@protoc_insertion_point(field_get:TelemetryMessage.id)
  return id_;
}
void TelemetryMessage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:TelemetryMessage.id)
}

// optional uint32 timestamp_ms = 2;
bool TelemetryMessage::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelemetryMessage::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void TelemetryMessage::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelemetryMessage::clear_timestamp_ms() {
  timestamp_ms_ = 0u;
  clear_has_timestamp_ms();
}
::google::protobuf::uint32 TelemetryMessage::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:TelemetryMessage.timestamp_ms)
  return timestamp_ms_;
}
void TelemetryMessage::set_timestamp_ms(::google::protobuf::uint32 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:TelemetryMessage.timestamp_ms)
}

// optional uint32 timestamp_variability = 3;
bool TelemetryMessage::has_timestamp_variability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TelemetryMessage::set_has_timestamp_variability() {
  _has_bits_[0] |= 0x00000004u;
}
void TelemetryMessage::clear_has_timestamp_variability() {
  _has_bits_[0] &= ~0x00000004u;
}
void TelemetryMessage::clear_timestamp_variability() {
  timestamp_variability_ = 0u;
  clear_has_timestamp_variability();
}
::google::protobuf::uint32 TelemetryMessage::timestamp_variability() const {
  // @@protoc_insertion_point(field_get:TelemetryMessage.timestamp_variability)
  return timestamp_variability_;
}
void TelemetryMessage::set_timestamp_variability(::google::protobuf::uint32 value) {
  set_has_timestamp_variability();
  timestamp_variability_ = value;
  // @@protoc_insertion_point(field_set:TelemetryMessage.timestamp_variability)
}

// optional .MeasurementAggregate sensorReading = 4;
bool TelemetryMessage::has_sensorreading() const {
  return value_case() == kSensorReading;
}
void TelemetryMessage::set_has_sensorreading() {
  _oneof_case_[0] = kSensorReading;
}
void TelemetryMessage::clear_sensorreading() {
  if (has_sensorreading()) {
    delete value_.sensorreading_;
    clear_has_value();
  }
}
 const ::MeasurementAggregate& TelemetryMessage::sensorreading() const {
  // @@protoc_insertion_point(field_get:TelemetryMessage.sensorReading)
  return has_sensorreading()
      ? *value_.sensorreading_
      : ::MeasurementAggregate::default_instance();
}
::MeasurementAggregate* TelemetryMessage::mutable_sensorreading() {
  if (!has_sensorreading()) {
    clear_value();
    set_has_sensorreading();
    value_.sensorreading_ = new ::MeasurementAggregate;
  }
  // @@protoc_insertion_point(field_mutable:TelemetryMessage.sensorReading)
  return value_.sensorreading_;
}
::MeasurementAggregate* TelemetryMessage::release_sensorreading() {
  // @@protoc_insertion_point(field_release:TelemetryMessage.sensorReading)
  if (has_sensorreading()) {
    clear_has_value();
    ::MeasurementAggregate* temp = value_.sensorreading_;
    value_.sensorreading_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TelemetryMessage::set_allocated_sensorreading(::MeasurementAggregate* sensorreading) {
  clear_value();
  if (sensorreading) {
    set_has_sensorreading();
    value_.sensorreading_ = sensorreading;
  }
  // @@protoc_insertion_point(field_set_allocated:TelemetryMessage.sensorReading)
}

// optional .InfoMessage infoMessage = 5;
bool TelemetryMessage::has_infomessage() const {
  return value_case() == kInfoMessage;
}
void TelemetryMessage::set_has_infomessage() {
  _oneof_case_[0] = kInfoMessage;
}
void TelemetryMessage::clear_infomessage() {
  if (has_infomessage()) {
    delete value_.infomessage_;
    clear_has_value();
  }
}
 const ::InfoMessage& TelemetryMessage::infomessage() const {
  // @@protoc_insertion_point(field_get:TelemetryMessage.infoMessage)
  return has_infomessage()
      ? *value_.infomessage_
      : ::InfoMessage::default_instance();
}
::InfoMessage* TelemetryMessage::mutable_infomessage() {
  if (!has_infomessage()) {
    clear_value();
    set_has_infomessage();
    value_.infomessage_ = new ::InfoMessage;
  }
  // @@protoc_insertion_point(field_mutable:TelemetryMessage.infoMessage)
  return value_.infomessage_;
}
::InfoMessage* TelemetryMessage::release_infomessage() {
  // @@protoc_insertion_point(field_release:TelemetryMessage.infoMessage)
  if (has_infomessage()) {
    clear_has_value();
    ::InfoMessage* temp = value_.infomessage_;
    value_.infomessage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TelemetryMessage::set_allocated_infomessage(::InfoMessage* infomessage) {
  clear_value();
  if (infomessage) {
    set_has_infomessage();
    value_.infomessage_ = infomessage;
  }
  // @@protoc_insertion_point(field_set_allocated:TelemetryMessage.infoMessage)
}

// optional .DeviceInfoMessage deviceInfo = 6;
bool TelemetryMessage::has_deviceinfo() const {
  return value_case() == kDeviceInfo;
}
void TelemetryMessage::set_has_deviceinfo() {
  _oneof_case_[0] = kDeviceInfo;
}
void TelemetryMessage::clear_deviceinfo() {
  if (has_deviceinfo()) {
    delete value_.deviceinfo_;
    clear_has_value();
  }
}
 const ::DeviceInfoMessage& TelemetryMessage::deviceinfo() const {
  // @@protoc_insertion_point(field_get:TelemetryMessage.deviceInfo)
  return has_deviceinfo()
      ? *value_.deviceinfo_
      : ::DeviceInfoMessage::default_instance();
}
::DeviceInfoMessage* TelemetryMessage::mutable_deviceinfo() {
  if (!has_deviceinfo()) {
    clear_value();
    set_has_deviceinfo();
    value_.deviceinfo_ = new ::DeviceInfoMessage;
  }
  // @@protoc_insertion_point(field_mutable:TelemetryMessage.deviceInfo)
  return value_.deviceinfo_;
}
::DeviceInfoMessage* TelemetryMessage::release_deviceinfo() {
  // @@protoc_insertion_point(field_release:TelemetryMessage.deviceInfo)
  if (has_deviceinfo()) {
    clear_has_value();
    ::DeviceInfoMessage* temp = value_.deviceinfo_;
    value_.deviceinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TelemetryMessage::set_allocated_deviceinfo(::DeviceInfoMessage* deviceinfo) {
  clear_value();
  if (deviceinfo) {
    set_has_deviceinfo();
    value_.deviceinfo_ = deviceinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:TelemetryMessage.deviceInfo)
}

bool TelemetryMessage::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void TelemetryMessage::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
TelemetryMessage::ValueCase TelemetryMessage::value_case() const {
  return TelemetryMessage::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
