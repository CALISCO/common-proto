// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry.proto

#ifndef PROTOBUF_telemetry_2eproto__INCLUDED
#define PROTOBUF_telemetry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "nanopb.pb.h"
// @@protoc_insertion_point(includes)
class DeviceInfoMessage;
class DeviceInfoMessageDefaultTypeInternal;
extern DeviceInfoMessageDefaultTypeInternal _DeviceInfoMessage_default_instance_;
class DeviceInfoMessage_DeviceDelayInfo;
class DeviceInfoMessage_DeviceDelayInfoDefaultTypeInternal;
extern DeviceInfoMessage_DeviceDelayInfoDefaultTypeInternal _DeviceInfoMessage_DeviceDelayInfo_default_instance_;
class DeviceInfoMessage_DeviceMeasurementInfo;
class DeviceInfoMessage_DeviceMeasurementInfoDefaultTypeInternal;
extern DeviceInfoMessage_DeviceMeasurementInfoDefaultTypeInternal _DeviceInfoMessage_DeviceMeasurementInfo_default_instance_;
class InfoMessage;
class InfoMessageDefaultTypeInternal;
extern InfoMessageDefaultTypeInternal _InfoMessage_default_instance_;
class MeasurementAggregate;
class MeasurementAggregateDefaultTypeInternal;
extern MeasurementAggregateDefaultTypeInternal _MeasurementAggregate_default_instance_;
class StatisticalAggregate;
class StatisticalAggregateDefaultTypeInternal;
extern StatisticalAggregateDefaultTypeInternal _StatisticalAggregate_default_instance_;
class TelemetryMessage;
class TelemetryMessageDefaultTypeInternal;
extern TelemetryMessageDefaultTypeInternal _TelemetryMessage_default_instance_;

namespace protobuf_telemetry_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_telemetry_2eproto

enum DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE {
  DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_VOLTAGE = 1,
  DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_CURRENT = 2,
  DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_TEMPERATURE = 3,
  DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_MCC = 4,
  DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_DRIVER_CONTROL = 5
};
bool DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_IsValid(int value);
const DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_READING_TYPE_MIN = DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_VOLTAGE;
const DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_READING_TYPE_MAX = DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_DRIVER_CONTROL;
const int DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_READING_TYPE_ARRAYSIZE = DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_READING_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_descriptor();
inline const ::std::string& DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_Name(DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_descriptor(), value);
}
inline bool DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_Parse(
    const ::std::string& name, DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE>(
    DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_descriptor(), name, value);
}
enum InfoMessage_MESSAGE_TYPE {
  InfoMessage_MESSAGE_TYPE_INFO = 1,
  InfoMessage_MESSAGE_TYPE_DEBUG = 2,
  InfoMessage_MESSAGE_TYPE_WARNING = 3,
  InfoMessage_MESSAGE_TYPE_ERROR = 4
};
bool InfoMessage_MESSAGE_TYPE_IsValid(int value);
const InfoMessage_MESSAGE_TYPE InfoMessage_MESSAGE_TYPE_MESSAGE_TYPE_MIN = InfoMessage_MESSAGE_TYPE_INFO;
const InfoMessage_MESSAGE_TYPE InfoMessage_MESSAGE_TYPE_MESSAGE_TYPE_MAX = InfoMessage_MESSAGE_TYPE_ERROR;
const int InfoMessage_MESSAGE_TYPE_MESSAGE_TYPE_ARRAYSIZE = InfoMessage_MESSAGE_TYPE_MESSAGE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* InfoMessage_MESSAGE_TYPE_descriptor();
inline const ::std::string& InfoMessage_MESSAGE_TYPE_Name(InfoMessage_MESSAGE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    InfoMessage_MESSAGE_TYPE_descriptor(), value);
}
inline bool InfoMessage_MESSAGE_TYPE_Parse(
    const ::std::string& name, InfoMessage_MESSAGE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InfoMessage_MESSAGE_TYPE>(
    InfoMessage_MESSAGE_TYPE_descriptor(), name, value);
}
// ===================================================================

class DeviceInfoMessage_DeviceMeasurementInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeviceInfoMessage.DeviceMeasurementInfo) */ {
 public:
  DeviceInfoMessage_DeviceMeasurementInfo();
  virtual ~DeviceInfoMessage_DeviceMeasurementInfo();

  DeviceInfoMessage_DeviceMeasurementInfo(const DeviceInfoMessage_DeviceMeasurementInfo& from);

  inline DeviceInfoMessage_DeviceMeasurementInfo& operator=(const DeviceInfoMessage_DeviceMeasurementInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfoMessage_DeviceMeasurementInfo(DeviceInfoMessage_DeviceMeasurementInfo&& from) noexcept
    : DeviceInfoMessage_DeviceMeasurementInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfoMessage_DeviceMeasurementInfo& operator=(DeviceInfoMessage_DeviceMeasurementInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfoMessage_DeviceMeasurementInfo& default_instance();

  static inline const DeviceInfoMessage_DeviceMeasurementInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfoMessage_DeviceMeasurementInfo*>(
               &_DeviceInfoMessage_DeviceMeasurementInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DeviceInfoMessage_DeviceMeasurementInfo* other);
  friend void swap(DeviceInfoMessage_DeviceMeasurementInfo& a, DeviceInfoMessage_DeviceMeasurementInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfoMessage_DeviceMeasurementInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceInfoMessage_DeviceMeasurementInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceInfoMessage_DeviceMeasurementInfo& from);
  void MergeFrom(const DeviceInfoMessage_DeviceMeasurementInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceInfoMessage_DeviceMeasurementInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE READING_TYPE;
  static const READING_TYPE VOLTAGE =
    DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_VOLTAGE;
  static const READING_TYPE CURRENT =
    DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_CURRENT;
  static const READING_TYPE TEMPERATURE =
    DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_TEMPERATURE;
  static const READING_TYPE MCC =
    DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_MCC;
  static const READING_TYPE DRIVER_CONTROL =
    DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_DRIVER_CONTROL;
  static inline bool READING_TYPE_IsValid(int value) {
    return DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_IsValid(value);
  }
  static const READING_TYPE READING_TYPE_MIN =
    DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_READING_TYPE_MIN;
  static const READING_TYPE READING_TYPE_MAX =
    DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_READING_TYPE_MAX;
  static const int READING_TYPE_ARRAYSIZE =
    DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_READING_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  READING_TYPE_descriptor() {
    return DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_descriptor();
  }
  static inline const ::std::string& READING_TYPE_Name(READING_TYPE value) {
    return DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_Name(value);
  }
  static inline bool READING_TYPE_Parse(const ::std::string& name,
      READING_TYPE* value) {
    return DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string units = 2 [(.nanopb) = {
  bool has_units() const;
  void clear_units();
  static const int kUnitsFieldNumber = 2;
  const ::std::string& units() const;
  void set_units(const ::std::string& value);
  #if LANG_CXX11
  void set_units(::std::string&& value);
  #endif
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  ::std::string* mutable_units();
  ::std::string* release_units();
  void set_allocated_units(::std::string* units);

  // optional uint32 minSensorLimit = 3;
  bool has_minsensorlimit() const;
  void clear_minsensorlimit();
  static const int kMinSensorLimitFieldNumber = 3;
  ::google::protobuf::uint32 minsensorlimit() const;
  void set_minsensorlimit(::google::protobuf::uint32 value);

  // optional uint32 maxSensorLimit = 4;
  bool has_maxsensorlimit() const;
  void clear_maxsensorlimit();
  static const int kMaxSensorLimitFieldNumber = 4;
  ::google::protobuf::uint32 maxsensorlimit() const;
  void set_maxsensorlimit(::google::protobuf::uint32 value);

  // optional uint32 minErrorBound = 5;
  bool has_minerrorbound() const;
  void clear_minerrorbound();
  static const int kMinErrorBoundFieldNumber = 5;
  ::google::protobuf::uint32 minerrorbound() const;
  void set_minerrorbound(::google::protobuf::uint32 value);

  // optional uint32 maxErrorBound = 6;
  bool has_maxerrorbound() const;
  void clear_maxerrorbound();
  static const int kMaxErrorBoundFieldNumber = 6;
  ::google::protobuf::uint32 maxerrorbound() const;
  void set_maxerrorbound(::google::protobuf::uint32 value);

  // optional uint32 resolution = 7;
  bool has_resolution() const;
  void clear_resolution();
  static const int kResolutionFieldNumber = 7;
  ::google::protobuf::uint32 resolution() const;
  void set_resolution(::google::protobuf::uint32 value);

  // optional uint32 accuracy = 8;
  bool has_accuracy() const;
  void clear_accuracy();
  static const int kAccuracyFieldNumber = 8;
  ::google::protobuf::uint32 accuracy() const;
  void set_accuracy(::google::protobuf::uint32 value);

  // optional .DeviceInfoMessage.DeviceMeasurementInfo.READING_TYPE readingType = 1;
  bool has_readingtype() const;
  void clear_readingtype();
  static const int kReadingTypeFieldNumber = 1;
  ::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE readingtype() const;
  void set_readingtype(::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE value);

  // @@protoc_insertion_point(class_scope:DeviceInfoMessage.DeviceMeasurementInfo)
 private:
  void set_has_readingtype();
  void clear_has_readingtype();
  void set_has_units();
  void clear_has_units();
  void set_has_minsensorlimit();
  void clear_has_minsensorlimit();
  void set_has_maxsensorlimit();
  void clear_has_maxsensorlimit();
  void set_has_minerrorbound();
  void clear_has_minerrorbound();
  void set_has_maxerrorbound();
  void clear_has_maxerrorbound();
  void set_has_resolution();
  void clear_has_resolution();
  void set_has_accuracy();
  void clear_has_accuracy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr units_;
  ::google::protobuf::uint32 minsensorlimit_;
  ::google::protobuf::uint32 maxsensorlimit_;
  ::google::protobuf::uint32 minerrorbound_;
  ::google::protobuf::uint32 maxerrorbound_;
  ::google::protobuf::uint32 resolution_;
  ::google::protobuf::uint32 accuracy_;
  int readingtype_;
  friend struct protobuf_telemetry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceInfoMessage_DeviceDelayInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeviceInfoMessage.DeviceDelayInfo) */ {
 public:
  DeviceInfoMessage_DeviceDelayInfo();
  virtual ~DeviceInfoMessage_DeviceDelayInfo();

  DeviceInfoMessage_DeviceDelayInfo(const DeviceInfoMessage_DeviceDelayInfo& from);

  inline DeviceInfoMessage_DeviceDelayInfo& operator=(const DeviceInfoMessage_DeviceDelayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfoMessage_DeviceDelayInfo(DeviceInfoMessage_DeviceDelayInfo&& from) noexcept
    : DeviceInfoMessage_DeviceDelayInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfoMessage_DeviceDelayInfo& operator=(DeviceInfoMessage_DeviceDelayInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfoMessage_DeviceDelayInfo& default_instance();

  static inline const DeviceInfoMessage_DeviceDelayInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfoMessage_DeviceDelayInfo*>(
               &_DeviceInfoMessage_DeviceDelayInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DeviceInfoMessage_DeviceDelayInfo* other);
  friend void swap(DeviceInfoMessage_DeviceDelayInfo& a, DeviceInfoMessage_DeviceDelayInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfoMessage_DeviceDelayInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceInfoMessage_DeviceDelayInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceInfoMessage_DeviceDelayInfo& from);
  void MergeFrom(const DeviceInfoMessage_DeviceDelayInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceInfoMessage_DeviceDelayInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 expectedSampleDelay = 1;
  bool has_expectedsampledelay() const;
  void clear_expectedsampledelay();
  static const int kExpectedSampleDelayFieldNumber = 1;
  ::google::protobuf::uint32 expectedsampledelay() const;
  void set_expectedsampledelay(::google::protobuf::uint32 value);

  // optional uint32 longestAcceptedSampleDelay = 2;
  bool has_longestacceptedsampledelay() const;
  void clear_longestacceptedsampledelay();
  static const int kLongestAcceptedSampleDelayFieldNumber = 2;
  ::google::protobuf::uint32 longestacceptedsampledelay() const;
  void set_longestacceptedsampledelay(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DeviceInfoMessage.DeviceDelayInfo)
 private:
  void set_has_expectedsampledelay();
  void clear_has_expectedsampledelay();
  void set_has_longestacceptedsampledelay();
  void clear_has_longestacceptedsampledelay();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 expectedsampledelay_;
  ::google::protobuf::uint32 longestacceptedsampledelay_;
  friend struct protobuf_telemetry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceInfoMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeviceInfoMessage) */ {
 public:
  DeviceInfoMessage();
  virtual ~DeviceInfoMessage();

  DeviceInfoMessage(const DeviceInfoMessage& from);

  inline DeviceInfoMessage& operator=(const DeviceInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfoMessage(DeviceInfoMessage&& from) noexcept
    : DeviceInfoMessage() {
    *this = ::std::move(from);
  }

  inline DeviceInfoMessage& operator=(DeviceInfoMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfoMessage& default_instance();

  static inline const DeviceInfoMessage* internal_default_instance() {
    return reinterpret_cast<const DeviceInfoMessage*>(
               &_DeviceInfoMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DeviceInfoMessage* other);
  friend void swap(DeviceInfoMessage& a, DeviceInfoMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfoMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceInfoMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceInfoMessage& from);
  void MergeFrom(const DeviceInfoMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceInfoMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DeviceInfoMessage_DeviceMeasurementInfo DeviceMeasurementInfo;
  typedef DeviceInfoMessage_DeviceDelayInfo DeviceDelayInfo;

  // accessors -------------------------------------------------------

  // optional string name = 2 [(.nanopb) = {
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .DeviceInfoMessage.DeviceMeasurementInfo measurementInfo = 3;
  bool has_measurementinfo() const;
  void clear_measurementinfo();
  static const int kMeasurementInfoFieldNumber = 3;
  const ::DeviceInfoMessage_DeviceMeasurementInfo& measurementinfo() const;
  ::DeviceInfoMessage_DeviceMeasurementInfo* mutable_measurementinfo();
  ::DeviceInfoMessage_DeviceMeasurementInfo* release_measurementinfo();
  void set_allocated_measurementinfo(::DeviceInfoMessage_DeviceMeasurementInfo* measurementinfo);

  // optional .DeviceInfoMessage.DeviceDelayInfo delayInfo = 4;
  bool has_delayinfo() const;
  void clear_delayinfo();
  static const int kDelayInfoFieldNumber = 4;
  const ::DeviceInfoMessage_DeviceDelayInfo& delayinfo() const;
  ::DeviceInfoMessage_DeviceDelayInfo* mutable_delayinfo();
  ::DeviceInfoMessage_DeviceDelayInfo* release_delayinfo();
  void set_allocated_delayinfo(::DeviceInfoMessage_DeviceDelayInfo* delayinfo);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DeviceInfoMessage)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_measurementinfo();
  void clear_has_measurementinfo();
  void set_has_delayinfo();
  void clear_has_delayinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::DeviceInfoMessage_DeviceMeasurementInfo* measurementinfo_;
  ::DeviceInfoMessage_DeviceDelayInfo* delayinfo_;
  ::google::protobuf::uint32 id_;
  friend struct protobuf_telemetry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatisticalAggregate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StatisticalAggregate) */ {
 public:
  StatisticalAggregate();
  virtual ~StatisticalAggregate();

  StatisticalAggregate(const StatisticalAggregate& from);

  inline StatisticalAggregate& operator=(const StatisticalAggregate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatisticalAggregate(StatisticalAggregate&& from) noexcept
    : StatisticalAggregate() {
    *this = ::std::move(from);
  }

  inline StatisticalAggregate& operator=(StatisticalAggregate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatisticalAggregate& default_instance();

  static inline const StatisticalAggregate* internal_default_instance() {
    return reinterpret_cast<const StatisticalAggregate*>(
               &_StatisticalAggregate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(StatisticalAggregate* other);
  friend void swap(StatisticalAggregate& a, StatisticalAggregate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatisticalAggregate* New() const PROTOBUF_FINAL { return New(NULL); }

  StatisticalAggregate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatisticalAggregate& from);
  void MergeFrom(const StatisticalAggregate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatisticalAggregate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 numSamples = 1;
  bool has_numsamples() const;
  void clear_numsamples();
  static const int kNumSamplesFieldNumber = 1;
  ::google::protobuf::uint32 numsamples() const;
  void set_numsamples(::google::protobuf::uint32 value);

  // optional uint32 min = 2;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 2;
  ::google::protobuf::uint32 min() const;
  void set_min(::google::protobuf::uint32 value);

  // optional uint32 max = 3;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 3;
  ::google::protobuf::uint32 max() const;
  void set_max(::google::protobuf::uint32 value);

  // optional uint32 mean = 4;
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 4;
  ::google::protobuf::uint32 mean() const;
  void set_mean(::google::protobuf::uint32 value);

  // optional uint32 stdev = 5;
  bool has_stdev() const;
  void clear_stdev();
  static const int kStdevFieldNumber = 5;
  ::google::protobuf::uint32 stdev() const;
  void set_stdev(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:StatisticalAggregate)
 private:
  void set_has_numsamples();
  void clear_has_numsamples();
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();
  void set_has_mean();
  void clear_has_mean();
  void set_has_stdev();
  void clear_has_stdev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 numsamples_;
  ::google::protobuf::uint32 min_;
  ::google::protobuf::uint32 max_;
  ::google::protobuf::uint32 mean_;
  ::google::protobuf::uint32 stdev_;
  friend struct protobuf_telemetry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MeasurementAggregate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MeasurementAggregate) */ {
 public:
  MeasurementAggregate();
  virtual ~MeasurementAggregate();

  MeasurementAggregate(const MeasurementAggregate& from);

  inline MeasurementAggregate& operator=(const MeasurementAggregate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MeasurementAggregate(MeasurementAggregate&& from) noexcept
    : MeasurementAggregate() {
    *this = ::std::move(from);
  }

  inline MeasurementAggregate& operator=(MeasurementAggregate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeasurementAggregate& default_instance();

  static inline const MeasurementAggregate* internal_default_instance() {
    return reinterpret_cast<const MeasurementAggregate*>(
               &_MeasurementAggregate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(MeasurementAggregate* other);
  friend void swap(MeasurementAggregate& a, MeasurementAggregate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MeasurementAggregate* New() const PROTOBUF_FINAL { return New(NULL); }

  MeasurementAggregate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MeasurementAggregate& from);
  void MergeFrom(const MeasurementAggregate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MeasurementAggregate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .StatisticalAggregate reading = 1;
  bool has_reading() const;
  void clear_reading();
  static const int kReadingFieldNumber = 1;
  const ::StatisticalAggregate& reading() const;
  ::StatisticalAggregate* mutable_reading();
  ::StatisticalAggregate* release_reading();
  void set_allocated_reading(::StatisticalAggregate* reading);

  // optional .StatisticalAggregate sampleDelay = 2;
  bool has_sampledelay() const;
  void clear_sampledelay();
  static const int kSampleDelayFieldNumber = 2;
  const ::StatisticalAggregate& sampledelay() const;
  ::StatisticalAggregate* mutable_sampledelay();
  ::StatisticalAggregate* release_sampledelay();
  void set_allocated_sampledelay(::StatisticalAggregate* sampledelay);

  // @@protoc_insertion_point(class_scope:MeasurementAggregate)
 private:
  void set_has_reading();
  void clear_has_reading();
  void set_has_sampledelay();
  void clear_has_sampledelay();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::StatisticalAggregate* reading_;
  ::StatisticalAggregate* sampledelay_;
  friend struct protobuf_telemetry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfoMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InfoMessage) */ {
 public:
  InfoMessage();
  virtual ~InfoMessage();

  InfoMessage(const InfoMessage& from);

  inline InfoMessage& operator=(const InfoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoMessage(InfoMessage&& from) noexcept
    : InfoMessage() {
    *this = ::std::move(from);
  }

  inline InfoMessage& operator=(InfoMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoMessage& default_instance();

  static inline const InfoMessage* internal_default_instance() {
    return reinterpret_cast<const InfoMessage*>(
               &_InfoMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(InfoMessage* other);
  friend void swap(InfoMessage& a, InfoMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  InfoMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InfoMessage& from);
  void MergeFrom(const InfoMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InfoMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef InfoMessage_MESSAGE_TYPE MESSAGE_TYPE;
  static const MESSAGE_TYPE INFO =
    InfoMessage_MESSAGE_TYPE_INFO;
  static const MESSAGE_TYPE DEBUG =
    InfoMessage_MESSAGE_TYPE_DEBUG;
  static const MESSAGE_TYPE WARNING =
    InfoMessage_MESSAGE_TYPE_WARNING;
  static const MESSAGE_TYPE ERROR =
    InfoMessage_MESSAGE_TYPE_ERROR;
  static inline bool MESSAGE_TYPE_IsValid(int value) {
    return InfoMessage_MESSAGE_TYPE_IsValid(value);
  }
  static const MESSAGE_TYPE MESSAGE_TYPE_MIN =
    InfoMessage_MESSAGE_TYPE_MESSAGE_TYPE_MIN;
  static const MESSAGE_TYPE MESSAGE_TYPE_MAX =
    InfoMessage_MESSAGE_TYPE_MESSAGE_TYPE_MAX;
  static const int MESSAGE_TYPE_ARRAYSIZE =
    InfoMessage_MESSAGE_TYPE_MESSAGE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MESSAGE_TYPE_descriptor() {
    return InfoMessage_MESSAGE_TYPE_descriptor();
  }
  static inline const ::std::string& MESSAGE_TYPE_Name(MESSAGE_TYPE value) {
    return InfoMessage_MESSAGE_TYPE_Name(value);
  }
  static inline bool MESSAGE_TYPE_Parse(const ::std::string& name,
      MESSAGE_TYPE* value) {
    return InfoMessage_MESSAGE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string message = 2 [(.nanopb) = {
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional .InfoMessage.MESSAGE_TYPE messageType = 1 [default = INFO];
  bool has_messagetype() const;
  void clear_messagetype();
  static const int kMessageTypeFieldNumber = 1;
  ::InfoMessage_MESSAGE_TYPE messagetype() const;
  void set_messagetype(::InfoMessage_MESSAGE_TYPE value);

  // @@protoc_insertion_point(class_scope:InfoMessage)
 private:
  void set_has_messagetype();
  void clear_has_messagetype();
  void set_has_message();
  void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int messagetype_;
  friend struct protobuf_telemetry_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TelemetryMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TelemetryMessage) */ {
 public:
  TelemetryMessage();
  virtual ~TelemetryMessage();

  TelemetryMessage(const TelemetryMessage& from);

  inline TelemetryMessage& operator=(const TelemetryMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TelemetryMessage(TelemetryMessage&& from) noexcept
    : TelemetryMessage() {
    *this = ::std::move(from);
  }

  inline TelemetryMessage& operator=(TelemetryMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelemetryMessage& default_instance();

  enum ValueCase {
    kSensorReading = 4,
    kInfoMessage = 5,
    kDeviceInfo = 6,
    VALUE_NOT_SET = 0,
  };

  static inline const TelemetryMessage* internal_default_instance() {
    return reinterpret_cast<const TelemetryMessage*>(
               &_TelemetryMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TelemetryMessage* other);
  friend void swap(TelemetryMessage& a, TelemetryMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TelemetryMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  TelemetryMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TelemetryMessage& from);
  void MergeFrom(const TelemetryMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TelemetryMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 timestamp_ms = 2;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 2;
  ::google::protobuf::uint32 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::uint32 value);

  // optional uint32 timestamp_variability = 3;
  bool has_timestamp_variability() const;
  void clear_timestamp_variability();
  static const int kTimestampVariabilityFieldNumber = 3;
  ::google::protobuf::uint32 timestamp_variability() const;
  void set_timestamp_variability(::google::protobuf::uint32 value);

  // optional .MeasurementAggregate sensorReading = 4;
  bool has_sensorreading() const;
  void clear_sensorreading();
  static const int kSensorReadingFieldNumber = 4;
  const ::MeasurementAggregate& sensorreading() const;
  ::MeasurementAggregate* mutable_sensorreading();
  ::MeasurementAggregate* release_sensorreading();
  void set_allocated_sensorreading(::MeasurementAggregate* sensorreading);

  // optional .InfoMessage infoMessage = 5;
  bool has_infomessage() const;
  void clear_infomessage();
  static const int kInfoMessageFieldNumber = 5;
  const ::InfoMessage& infomessage() const;
  ::InfoMessage* mutable_infomessage();
  ::InfoMessage* release_infomessage();
  void set_allocated_infomessage(::InfoMessage* infomessage);

  // optional .DeviceInfoMessage deviceInfo = 6;
  bool has_deviceinfo() const;
  void clear_deviceinfo();
  static const int kDeviceInfoFieldNumber = 6;
  const ::DeviceInfoMessage& deviceinfo() const;
  ::DeviceInfoMessage* mutable_deviceinfo();
  ::DeviceInfoMessage* release_deviceinfo();
  void set_allocated_deviceinfo(::DeviceInfoMessage* deviceinfo);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:TelemetryMessage)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_timestamp_ms();
  void clear_has_timestamp_ms();
  void set_has_timestamp_variability();
  void clear_has_timestamp_variability();
  void set_has_sensorreading();
  void set_has_infomessage();
  void set_has_deviceinfo();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 timestamp_ms_;
  ::google::protobuf::uint32 timestamp_variability_;
  union ValueUnion {
    ValueUnion() {}
    ::MeasurementAggregate* sensorreading_;
    ::InfoMessage* infomessage_;
    ::DeviceInfoMessage* deviceinfo_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_telemetry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceInfoMessage_DeviceMeasurementInfo

// optional .DeviceInfoMessage.DeviceMeasurementInfo.READING_TYPE readingType = 1;
inline bool DeviceInfoMessage_DeviceMeasurementInfo::has_readingtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_has_readingtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_readingtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_readingtype() {
  readingtype_ = 1;
  clear_has_readingtype();
}
inline ::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE DeviceInfoMessage_DeviceMeasurementInfo::readingtype() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.readingType)
  return static_cast< ::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE >(readingtype_);
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_readingtype(::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE value) {
  assert(::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_IsValid(value));
  set_has_readingtype();
  readingtype_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.readingType)
}

// optional string units = 2 [(.nanopb) = {
inline bool DeviceInfoMessage_DeviceMeasurementInfo::has_units() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_has_units() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_units() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_units() {
  units_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_units();
}
inline const ::std::string& DeviceInfoMessage_DeviceMeasurementInfo::units() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.units)
  return units_.GetNoArena();
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_units(const ::std::string& value) {
  set_has_units();
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.units)
}
#if LANG_CXX11
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_units(::std::string&& value) {
  set_has_units();
  units_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceInfoMessage.DeviceMeasurementInfo.units)
}
#endif
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_units(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_units();
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceInfoMessage.DeviceMeasurementInfo.units)
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_units(const char* value, size_t size) {
  set_has_units();
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceInfoMessage.DeviceMeasurementInfo.units)
}
inline ::std::string* DeviceInfoMessage_DeviceMeasurementInfo::mutable_units() {
  set_has_units();
  // @@protoc_insertion_point(field_mutable:DeviceInfoMessage.DeviceMeasurementInfo.units)
  return units_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfoMessage_DeviceMeasurementInfo::release_units() {
  // @@protoc_insertion_point(field_release:DeviceInfoMessage.DeviceMeasurementInfo.units)
  clear_has_units();
  return units_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_allocated_units(::std::string* units) {
  if (units != NULL) {
    set_has_units();
  } else {
    clear_has_units();
  }
  units_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), units);
  // @@protoc_insertion_point(field_set_allocated:DeviceInfoMessage.DeviceMeasurementInfo.units)
}

// optional uint32 minSensorLimit = 3;
inline bool DeviceInfoMessage_DeviceMeasurementInfo::has_minsensorlimit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_has_minsensorlimit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_minsensorlimit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_minsensorlimit() {
  minsensorlimit_ = 0u;
  clear_has_minsensorlimit();
}
inline ::google::protobuf::uint32 DeviceInfoMessage_DeviceMeasurementInfo::minsensorlimit() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.minSensorLimit)
  return minsensorlimit_;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_minsensorlimit(::google::protobuf::uint32 value) {
  set_has_minsensorlimit();
  minsensorlimit_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.minSensorLimit)
}

// optional uint32 maxSensorLimit = 4;
inline bool DeviceInfoMessage_DeviceMeasurementInfo::has_maxsensorlimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_has_maxsensorlimit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_maxsensorlimit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_maxsensorlimit() {
  maxsensorlimit_ = 0u;
  clear_has_maxsensorlimit();
}
inline ::google::protobuf::uint32 DeviceInfoMessage_DeviceMeasurementInfo::maxsensorlimit() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.maxSensorLimit)
  return maxsensorlimit_;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_maxsensorlimit(::google::protobuf::uint32 value) {
  set_has_maxsensorlimit();
  maxsensorlimit_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.maxSensorLimit)
}

// optional uint32 minErrorBound = 5;
inline bool DeviceInfoMessage_DeviceMeasurementInfo::has_minerrorbound() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_has_minerrorbound() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_minerrorbound() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_minerrorbound() {
  minerrorbound_ = 0u;
  clear_has_minerrorbound();
}
inline ::google::protobuf::uint32 DeviceInfoMessage_DeviceMeasurementInfo::minerrorbound() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.minErrorBound)
  return minerrorbound_;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_minerrorbound(::google::protobuf::uint32 value) {
  set_has_minerrorbound();
  minerrorbound_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.minErrorBound)
}

// optional uint32 maxErrorBound = 6;
inline bool DeviceInfoMessage_DeviceMeasurementInfo::has_maxerrorbound() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_has_maxerrorbound() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_maxerrorbound() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_maxerrorbound() {
  maxerrorbound_ = 0u;
  clear_has_maxerrorbound();
}
inline ::google::protobuf::uint32 DeviceInfoMessage_DeviceMeasurementInfo::maxerrorbound() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.maxErrorBound)
  return maxerrorbound_;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_maxerrorbound(::google::protobuf::uint32 value) {
  set_has_maxerrorbound();
  maxerrorbound_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.maxErrorBound)
}

// optional uint32 resolution = 7;
inline bool DeviceInfoMessage_DeviceMeasurementInfo::has_resolution() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_has_resolution() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_resolution() {
  resolution_ = 0u;
  clear_has_resolution();
}
inline ::google::protobuf::uint32 DeviceInfoMessage_DeviceMeasurementInfo::resolution() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.resolution)
  return resolution_;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_resolution(::google::protobuf::uint32 value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.resolution)
}

// optional uint32 accuracy = 8;
inline bool DeviceInfoMessage_DeviceMeasurementInfo::has_accuracy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_has_accuracy() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_has_accuracy() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::clear_accuracy() {
  accuracy_ = 0u;
  clear_has_accuracy();
}
inline ::google::protobuf::uint32 DeviceInfoMessage_DeviceMeasurementInfo::accuracy() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceMeasurementInfo.accuracy)
  return accuracy_;
}
inline void DeviceInfoMessage_DeviceMeasurementInfo::set_accuracy(::google::protobuf::uint32 value) {
  set_has_accuracy();
  accuracy_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceMeasurementInfo.accuracy)
}

// -------------------------------------------------------------------

// DeviceInfoMessage_DeviceDelayInfo

// optional uint32 expectedSampleDelay = 1;
inline bool DeviceInfoMessage_DeviceDelayInfo::has_expectedsampledelay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceInfoMessage_DeviceDelayInfo::set_has_expectedsampledelay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceInfoMessage_DeviceDelayInfo::clear_has_expectedsampledelay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceInfoMessage_DeviceDelayInfo::clear_expectedsampledelay() {
  expectedsampledelay_ = 0u;
  clear_has_expectedsampledelay();
}
inline ::google::protobuf::uint32 DeviceInfoMessage_DeviceDelayInfo::expectedsampledelay() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceDelayInfo.expectedSampleDelay)
  return expectedsampledelay_;
}
inline void DeviceInfoMessage_DeviceDelayInfo::set_expectedsampledelay(::google::protobuf::uint32 value) {
  set_has_expectedsampledelay();
  expectedsampledelay_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceDelayInfo.expectedSampleDelay)
}

// optional uint32 longestAcceptedSampleDelay = 2;
inline bool DeviceInfoMessage_DeviceDelayInfo::has_longestacceptedsampledelay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceInfoMessage_DeviceDelayInfo::set_has_longestacceptedsampledelay() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceInfoMessage_DeviceDelayInfo::clear_has_longestacceptedsampledelay() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceInfoMessage_DeviceDelayInfo::clear_longestacceptedsampledelay() {
  longestacceptedsampledelay_ = 0u;
  clear_has_longestacceptedsampledelay();
}
inline ::google::protobuf::uint32 DeviceInfoMessage_DeviceDelayInfo::longestacceptedsampledelay() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.DeviceDelayInfo.longestAcceptedSampleDelay)
  return longestacceptedsampledelay_;
}
inline void DeviceInfoMessage_DeviceDelayInfo::set_longestacceptedsampledelay(::google::protobuf::uint32 value) {
  set_has_longestacceptedsampledelay();
  longestacceptedsampledelay_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.DeviceDelayInfo.longestAcceptedSampleDelay)
}

// -------------------------------------------------------------------

// DeviceInfoMessage

// optional uint32 id = 1;
inline bool DeviceInfoMessage::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceInfoMessage::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceInfoMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceInfoMessage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 DeviceInfoMessage::id() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.id)
  return id_;
}
inline void DeviceInfoMessage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.id)
}

// optional string name = 2 [(.nanopb) = {
inline bool DeviceInfoMessage::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceInfoMessage::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceInfoMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceInfoMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DeviceInfoMessage::name() const {
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.name)
  return name_.GetNoArena();
}
inline void DeviceInfoMessage::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceInfoMessage.name)
}
#if LANG_CXX11
inline void DeviceInfoMessage::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceInfoMessage.name)
}
#endif
inline void DeviceInfoMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceInfoMessage.name)
}
inline void DeviceInfoMessage::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceInfoMessage.name)
}
inline ::std::string* DeviceInfoMessage::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:DeviceInfoMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfoMessage::release_name() {
  // @@protoc_insertion_point(field_release:DeviceInfoMessage.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfoMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DeviceInfoMessage.name)
}

// optional .DeviceInfoMessage.DeviceMeasurementInfo measurementInfo = 3;
inline bool DeviceInfoMessage::has_measurementinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceInfoMessage::set_has_measurementinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceInfoMessage::clear_has_measurementinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceInfoMessage::clear_measurementinfo() {
  if (measurementinfo_ != NULL) measurementinfo_->::DeviceInfoMessage_DeviceMeasurementInfo::Clear();
  clear_has_measurementinfo();
}
inline const ::DeviceInfoMessage_DeviceMeasurementInfo& DeviceInfoMessage::measurementinfo() const {
  const ::DeviceInfoMessage_DeviceMeasurementInfo* p = measurementinfo_;
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.measurementInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::DeviceInfoMessage_DeviceMeasurementInfo*>(
      &::_DeviceInfoMessage_DeviceMeasurementInfo_default_instance_);
}
inline ::DeviceInfoMessage_DeviceMeasurementInfo* DeviceInfoMessage::mutable_measurementinfo() {
  set_has_measurementinfo();
  if (measurementinfo_ == NULL) {
    measurementinfo_ = new ::DeviceInfoMessage_DeviceMeasurementInfo;
  }
  // @@protoc_insertion_point(field_mutable:DeviceInfoMessage.measurementInfo)
  return measurementinfo_;
}
inline ::DeviceInfoMessage_DeviceMeasurementInfo* DeviceInfoMessage::release_measurementinfo() {
  // @@protoc_insertion_point(field_release:DeviceInfoMessage.measurementInfo)
  clear_has_measurementinfo();
  ::DeviceInfoMessage_DeviceMeasurementInfo* temp = measurementinfo_;
  measurementinfo_ = NULL;
  return temp;
}
inline void DeviceInfoMessage::set_allocated_measurementinfo(::DeviceInfoMessage_DeviceMeasurementInfo* measurementinfo) {
  delete measurementinfo_;
  measurementinfo_ = measurementinfo;
  if (measurementinfo) {
    set_has_measurementinfo();
  } else {
    clear_has_measurementinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceInfoMessage.measurementInfo)
}

// optional .DeviceInfoMessage.DeviceDelayInfo delayInfo = 4;
inline bool DeviceInfoMessage::has_delayinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceInfoMessage::set_has_delayinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceInfoMessage::clear_has_delayinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceInfoMessage::clear_delayinfo() {
  if (delayinfo_ != NULL) delayinfo_->::DeviceInfoMessage_DeviceDelayInfo::Clear();
  clear_has_delayinfo();
}
inline const ::DeviceInfoMessage_DeviceDelayInfo& DeviceInfoMessage::delayinfo() const {
  const ::DeviceInfoMessage_DeviceDelayInfo* p = delayinfo_;
  // @@protoc_insertion_point(field_get:DeviceInfoMessage.delayInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::DeviceInfoMessage_DeviceDelayInfo*>(
      &::_DeviceInfoMessage_DeviceDelayInfo_default_instance_);
}
inline ::DeviceInfoMessage_DeviceDelayInfo* DeviceInfoMessage::mutable_delayinfo() {
  set_has_delayinfo();
  if (delayinfo_ == NULL) {
    delayinfo_ = new ::DeviceInfoMessage_DeviceDelayInfo;
  }
  // @@protoc_insertion_point(field_mutable:DeviceInfoMessage.delayInfo)
  return delayinfo_;
}
inline ::DeviceInfoMessage_DeviceDelayInfo* DeviceInfoMessage::release_delayinfo() {
  // @@protoc_insertion_point(field_release:DeviceInfoMessage.delayInfo)
  clear_has_delayinfo();
  ::DeviceInfoMessage_DeviceDelayInfo* temp = delayinfo_;
  delayinfo_ = NULL;
  return temp;
}
inline void DeviceInfoMessage::set_allocated_delayinfo(::DeviceInfoMessage_DeviceDelayInfo* delayinfo) {
  delete delayinfo_;
  delayinfo_ = delayinfo;
  if (delayinfo) {
    set_has_delayinfo();
  } else {
    clear_has_delayinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceInfoMessage.delayInfo)
}

// -------------------------------------------------------------------

// StatisticalAggregate

// optional uint32 numSamples = 1;
inline bool StatisticalAggregate::has_numsamples() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatisticalAggregate::set_has_numsamples() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatisticalAggregate::clear_has_numsamples() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatisticalAggregate::clear_numsamples() {
  numsamples_ = 0u;
  clear_has_numsamples();
}
inline ::google::protobuf::uint32 StatisticalAggregate::numsamples() const {
  // @@protoc_insertion_point(field_get:StatisticalAggregate.numSamples)
  return numsamples_;
}
inline void StatisticalAggregate::set_numsamples(::google::protobuf::uint32 value) {
  set_has_numsamples();
  numsamples_ = value;
  // @@protoc_insertion_point(field_set:StatisticalAggregate.numSamples)
}

// optional uint32 min = 2;
inline bool StatisticalAggregate::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatisticalAggregate::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatisticalAggregate::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatisticalAggregate::clear_min() {
  min_ = 0u;
  clear_has_min();
}
inline ::google::protobuf::uint32 StatisticalAggregate::min() const {
  // @@protoc_insertion_point(field_get:StatisticalAggregate.min)
  return min_;
}
inline void StatisticalAggregate::set_min(::google::protobuf::uint32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:StatisticalAggregate.min)
}

// optional uint32 max = 3;
inline bool StatisticalAggregate::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatisticalAggregate::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatisticalAggregate::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatisticalAggregate::clear_max() {
  max_ = 0u;
  clear_has_max();
}
inline ::google::protobuf::uint32 StatisticalAggregate::max() const {
  // @@protoc_insertion_point(field_get:StatisticalAggregate.max)
  return max_;
}
inline void StatisticalAggregate::set_max(::google::protobuf::uint32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:StatisticalAggregate.max)
}

// optional uint32 mean = 4;
inline bool StatisticalAggregate::has_mean() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatisticalAggregate::set_has_mean() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatisticalAggregate::clear_has_mean() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatisticalAggregate::clear_mean() {
  mean_ = 0u;
  clear_has_mean();
}
inline ::google::protobuf::uint32 StatisticalAggregate::mean() const {
  // @@protoc_insertion_point(field_get:StatisticalAggregate.mean)
  return mean_;
}
inline void StatisticalAggregate::set_mean(::google::protobuf::uint32 value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:StatisticalAggregate.mean)
}

// optional uint32 stdev = 5;
inline bool StatisticalAggregate::has_stdev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatisticalAggregate::set_has_stdev() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StatisticalAggregate::clear_has_stdev() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StatisticalAggregate::clear_stdev() {
  stdev_ = 0u;
  clear_has_stdev();
}
inline ::google::protobuf::uint32 StatisticalAggregate::stdev() const {
  // @@protoc_insertion_point(field_get:StatisticalAggregate.stdev)
  return stdev_;
}
inline void StatisticalAggregate::set_stdev(::google::protobuf::uint32 value) {
  set_has_stdev();
  stdev_ = value;
  // @@protoc_insertion_point(field_set:StatisticalAggregate.stdev)
}

// -------------------------------------------------------------------

// MeasurementAggregate

// optional .StatisticalAggregate reading = 1;
inline bool MeasurementAggregate::has_reading() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeasurementAggregate::set_has_reading() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeasurementAggregate::clear_has_reading() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeasurementAggregate::clear_reading() {
  if (reading_ != NULL) reading_->::StatisticalAggregate::Clear();
  clear_has_reading();
}
inline const ::StatisticalAggregate& MeasurementAggregate::reading() const {
  const ::StatisticalAggregate* p = reading_;
  // @@protoc_insertion_point(field_get:MeasurementAggregate.reading)
  return p != NULL ? *p : *reinterpret_cast<const ::StatisticalAggregate*>(
      &::_StatisticalAggregate_default_instance_);
}
inline ::StatisticalAggregate* MeasurementAggregate::mutable_reading() {
  set_has_reading();
  if (reading_ == NULL) {
    reading_ = new ::StatisticalAggregate;
  }
  // @@protoc_insertion_point(field_mutable:MeasurementAggregate.reading)
  return reading_;
}
inline ::StatisticalAggregate* MeasurementAggregate::release_reading() {
  // @@protoc_insertion_point(field_release:MeasurementAggregate.reading)
  clear_has_reading();
  ::StatisticalAggregate* temp = reading_;
  reading_ = NULL;
  return temp;
}
inline void MeasurementAggregate::set_allocated_reading(::StatisticalAggregate* reading) {
  delete reading_;
  reading_ = reading;
  if (reading) {
    set_has_reading();
  } else {
    clear_has_reading();
  }
  // @@protoc_insertion_point(field_set_allocated:MeasurementAggregate.reading)
}

// optional .StatisticalAggregate sampleDelay = 2;
inline bool MeasurementAggregate::has_sampledelay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeasurementAggregate::set_has_sampledelay() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeasurementAggregate::clear_has_sampledelay() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeasurementAggregate::clear_sampledelay() {
  if (sampledelay_ != NULL) sampledelay_->::StatisticalAggregate::Clear();
  clear_has_sampledelay();
}
inline const ::StatisticalAggregate& MeasurementAggregate::sampledelay() const {
  const ::StatisticalAggregate* p = sampledelay_;
  // @@protoc_insertion_point(field_get:MeasurementAggregate.sampleDelay)
  return p != NULL ? *p : *reinterpret_cast<const ::StatisticalAggregate*>(
      &::_StatisticalAggregate_default_instance_);
}
inline ::StatisticalAggregate* MeasurementAggregate::mutable_sampledelay() {
  set_has_sampledelay();
  if (sampledelay_ == NULL) {
    sampledelay_ = new ::StatisticalAggregate;
  }
  // @@protoc_insertion_point(field_mutable:MeasurementAggregate.sampleDelay)
  return sampledelay_;
}
inline ::StatisticalAggregate* MeasurementAggregate::release_sampledelay() {
  // @@protoc_insertion_point(field_release:MeasurementAggregate.sampleDelay)
  clear_has_sampledelay();
  ::StatisticalAggregate* temp = sampledelay_;
  sampledelay_ = NULL;
  return temp;
}
inline void MeasurementAggregate::set_allocated_sampledelay(::StatisticalAggregate* sampledelay) {
  delete sampledelay_;
  sampledelay_ = sampledelay;
  if (sampledelay) {
    set_has_sampledelay();
  } else {
    clear_has_sampledelay();
  }
  // @@protoc_insertion_point(field_set_allocated:MeasurementAggregate.sampleDelay)
}

// -------------------------------------------------------------------

// InfoMessage

// optional .InfoMessage.MESSAGE_TYPE messageType = 1 [default = INFO];
inline bool InfoMessage::has_messagetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InfoMessage::set_has_messagetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InfoMessage::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InfoMessage::clear_messagetype() {
  messagetype_ = 1;
  clear_has_messagetype();
}
inline ::InfoMessage_MESSAGE_TYPE InfoMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:InfoMessage.messageType)
  return static_cast< ::InfoMessage_MESSAGE_TYPE >(messagetype_);
}
inline void InfoMessage::set_messagetype(::InfoMessage_MESSAGE_TYPE value) {
  assert(::InfoMessage_MESSAGE_TYPE_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:InfoMessage.messageType)
}

// optional string message = 2 [(.nanopb) = {
inline bool InfoMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfoMessage::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfoMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfoMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& InfoMessage::message() const {
  // @@protoc_insertion_point(field_get:InfoMessage.message)
  return message_.GetNoArena();
}
inline void InfoMessage::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InfoMessage.message)
}
#if LANG_CXX11
inline void InfoMessage::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InfoMessage.message)
}
#endif
inline void InfoMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InfoMessage.message)
}
inline void InfoMessage::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InfoMessage.message)
}
inline ::std::string* InfoMessage::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:InfoMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoMessage::release_message() {
  // @@protoc_insertion_point(field_release:InfoMessage.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:InfoMessage.message)
}

// -------------------------------------------------------------------

// TelemetryMessage

// optional uint32 id = 1;
inline bool TelemetryMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelemetryMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelemetryMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelemetryMessage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TelemetryMessage::id() const {
  // @@protoc_insertion_point(field_get:TelemetryMessage.id)
  return id_;
}
inline void TelemetryMessage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:TelemetryMessage.id)
}

// optional uint32 timestamp_ms = 2;
inline bool TelemetryMessage::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelemetryMessage::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelemetryMessage::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelemetryMessage::clear_timestamp_ms() {
  timestamp_ms_ = 0u;
  clear_has_timestamp_ms();
}
inline ::google::protobuf::uint32 TelemetryMessage::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:TelemetryMessage.timestamp_ms)
  return timestamp_ms_;
}
inline void TelemetryMessage::set_timestamp_ms(::google::protobuf::uint32 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:TelemetryMessage.timestamp_ms)
}

// optional uint32 timestamp_variability = 3;
inline bool TelemetryMessage::has_timestamp_variability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TelemetryMessage::set_has_timestamp_variability() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TelemetryMessage::clear_has_timestamp_variability() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TelemetryMessage::clear_timestamp_variability() {
  timestamp_variability_ = 0u;
  clear_has_timestamp_variability();
}
inline ::google::protobuf::uint32 TelemetryMessage::timestamp_variability() const {
  // @@protoc_insertion_point(field_get:TelemetryMessage.timestamp_variability)
  return timestamp_variability_;
}
inline void TelemetryMessage::set_timestamp_variability(::google::protobuf::uint32 value) {
  set_has_timestamp_variability();
  timestamp_variability_ = value;
  // @@protoc_insertion_point(field_set:TelemetryMessage.timestamp_variability)
}

// optional .MeasurementAggregate sensorReading = 4;
inline bool TelemetryMessage::has_sensorreading() const {
  return value_case() == kSensorReading;
}
inline void TelemetryMessage::set_has_sensorreading() {
  _oneof_case_[0] = kSensorReading;
}
inline void TelemetryMessage::clear_sensorreading() {
  if (has_sensorreading()) {
    delete value_.sensorreading_;
    clear_has_value();
  }
}
inline  const ::MeasurementAggregate& TelemetryMessage::sensorreading() const {
  // @@protoc_insertion_point(field_get:TelemetryMessage.sensorReading)
  return has_sensorreading()
      ? *value_.sensorreading_
      : ::MeasurementAggregate::default_instance();
}
inline ::MeasurementAggregate* TelemetryMessage::mutable_sensorreading() {
  if (!has_sensorreading()) {
    clear_value();
    set_has_sensorreading();
    value_.sensorreading_ = new ::MeasurementAggregate;
  }
  // @@protoc_insertion_point(field_mutable:TelemetryMessage.sensorReading)
  return value_.sensorreading_;
}
inline ::MeasurementAggregate* TelemetryMessage::release_sensorreading() {
  // @@protoc_insertion_point(field_release:TelemetryMessage.sensorReading)
  if (has_sensorreading()) {
    clear_has_value();
    ::MeasurementAggregate* temp = value_.sensorreading_;
    value_.sensorreading_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TelemetryMessage::set_allocated_sensorreading(::MeasurementAggregate* sensorreading) {
  clear_value();
  if (sensorreading) {
    set_has_sensorreading();
    value_.sensorreading_ = sensorreading;
  }
  // @@protoc_insertion_point(field_set_allocated:TelemetryMessage.sensorReading)
}

// optional .InfoMessage infoMessage = 5;
inline bool TelemetryMessage::has_infomessage() const {
  return value_case() == kInfoMessage;
}
inline void TelemetryMessage::set_has_infomessage() {
  _oneof_case_[0] = kInfoMessage;
}
inline void TelemetryMessage::clear_infomessage() {
  if (has_infomessage()) {
    delete value_.infomessage_;
    clear_has_value();
  }
}
inline  const ::InfoMessage& TelemetryMessage::infomessage() const {
  // @@protoc_insertion_point(field_get:TelemetryMessage.infoMessage)
  return has_infomessage()
      ? *value_.infomessage_
      : ::InfoMessage::default_instance();
}
inline ::InfoMessage* TelemetryMessage::mutable_infomessage() {
  if (!has_infomessage()) {
    clear_value();
    set_has_infomessage();
    value_.infomessage_ = new ::InfoMessage;
  }
  // @@protoc_insertion_point(field_mutable:TelemetryMessage.infoMessage)
  return value_.infomessage_;
}
inline ::InfoMessage* TelemetryMessage::release_infomessage() {
  // @@protoc_insertion_point(field_release:TelemetryMessage.infoMessage)
  if (has_infomessage()) {
    clear_has_value();
    ::InfoMessage* temp = value_.infomessage_;
    value_.infomessage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TelemetryMessage::set_allocated_infomessage(::InfoMessage* infomessage) {
  clear_value();
  if (infomessage) {
    set_has_infomessage();
    value_.infomessage_ = infomessage;
  }
  // @@protoc_insertion_point(field_set_allocated:TelemetryMessage.infoMessage)
}

// optional .DeviceInfoMessage deviceInfo = 6;
inline bool TelemetryMessage::has_deviceinfo() const {
  return value_case() == kDeviceInfo;
}
inline void TelemetryMessage::set_has_deviceinfo() {
  _oneof_case_[0] = kDeviceInfo;
}
inline void TelemetryMessage::clear_deviceinfo() {
  if (has_deviceinfo()) {
    delete value_.deviceinfo_;
    clear_has_value();
  }
}
inline  const ::DeviceInfoMessage& TelemetryMessage::deviceinfo() const {
  // @@protoc_insertion_point(field_get:TelemetryMessage.deviceInfo)
  return has_deviceinfo()
      ? *value_.deviceinfo_
      : ::DeviceInfoMessage::default_instance();
}
inline ::DeviceInfoMessage* TelemetryMessage::mutable_deviceinfo() {
  if (!has_deviceinfo()) {
    clear_value();
    set_has_deviceinfo();
    value_.deviceinfo_ = new ::DeviceInfoMessage;
  }
  // @@protoc_insertion_point(field_mutable:TelemetryMessage.deviceInfo)
  return value_.deviceinfo_;
}
inline ::DeviceInfoMessage* TelemetryMessage::release_deviceinfo() {
  // @@protoc_insertion_point(field_release:TelemetryMessage.deviceInfo)
  if (has_deviceinfo()) {
    clear_has_value();
    ::DeviceInfoMessage* temp = value_.deviceinfo_;
    value_.deviceinfo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TelemetryMessage::set_allocated_deviceinfo(::DeviceInfoMessage* deviceinfo) {
  clear_value();
  if (deviceinfo) {
    set_has_deviceinfo();
    value_.deviceinfo_ = deviceinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:TelemetryMessage.deviceInfo)
}

inline bool TelemetryMessage::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TelemetryMessage::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TelemetryMessage::ValueCase TelemetryMessage::value_case() const {
  return TelemetryMessage::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE>() {
  return ::DeviceInfoMessage_DeviceMeasurementInfo_READING_TYPE_descriptor();
}
template <> struct is_proto_enum< ::InfoMessage_MESSAGE_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::InfoMessage_MESSAGE_TYPE>() {
  return ::InfoMessage_MESSAGE_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_telemetry_2eproto__INCLUDED
